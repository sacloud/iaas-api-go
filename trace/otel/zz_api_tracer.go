// Copyright 2022-2023 The sacloud/iaas-api-go Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// generated by 'github.com/sacloud/iaas-api-go/internal/tools/gen-otel-tracer'; DO NOT EDIT

package otel

import (
	"context"
	"net/http/httptrace"

	"github.com/sacloud/iaas-api-go"
	"github.com/sacloud/iaas-api-go/types"
	"go.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

func addClientFactoryHooks(cnf *config) {
	iaas.AddClientFacotyHookFunc("Archive", func(in interface{}) interface{} {
		return newArchiveTracer(in.(iaas.ArchiveAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("AuthStatus", func(in interface{}) interface{} {
		return newAuthStatusTracer(in.(iaas.AuthStatusAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("AutoBackup", func(in interface{}) interface{} {
		return newAutoBackupTracer(in.(iaas.AutoBackupAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("AutoScale", func(in interface{}) interface{} {
		return newAutoScaleTracer(in.(iaas.AutoScaleAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Bill", func(in interface{}) interface{} {
		return newBillTracer(in.(iaas.BillAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Bridge", func(in interface{}) interface{} {
		return newBridgeTracer(in.(iaas.BridgeAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("CDROM", func(in interface{}) interface{} {
		return newCDROMTracer(in.(iaas.CDROMAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("CertificateAuthority", func(in interface{}) interface{} {
		return newCertificateAuthorityTracer(in.(iaas.CertificateAuthorityAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("ContainerRegistry", func(in interface{}) interface{} {
		return newContainerRegistryTracer(in.(iaas.ContainerRegistryAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Coupon", func(in interface{}) interface{} {
		return newCouponTracer(in.(iaas.CouponAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Database", func(in interface{}) interface{} {
		return newDatabaseTracer(in.(iaas.DatabaseAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Disk", func(in interface{}) interface{} {
		return newDiskTracer(in.(iaas.DiskAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("DiskPlan", func(in interface{}) interface{} {
		return newDiskPlanTracer(in.(iaas.DiskPlanAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("DNS", func(in interface{}) interface{} {
		return newDNSTracer(in.(iaas.DNSAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("EnhancedDB", func(in interface{}) interface{} {
		return newEnhancedDBTracer(in.(iaas.EnhancedDBAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("ESME", func(in interface{}) interface{} {
		return newESMETracer(in.(iaas.ESMEAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("GSLB", func(in interface{}) interface{} {
		return newGSLBTracer(in.(iaas.GSLBAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Icon", func(in interface{}) interface{} {
		return newIconTracer(in.(iaas.IconAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Interface", func(in interface{}) interface{} {
		return newInterfaceTracer(in.(iaas.InterfaceAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Internet", func(in interface{}) interface{} {
		return newInternetTracer(in.(iaas.InternetAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("InternetPlan", func(in interface{}) interface{} {
		return newInternetPlanTracer(in.(iaas.InternetPlanAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("IPAddress", func(in interface{}) interface{} {
		return newIPAddressTracer(in.(iaas.IPAddressAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("IPv6Net", func(in interface{}) interface{} {
		return newIPv6NetTracer(in.(iaas.IPv6NetAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("IPv6Addr", func(in interface{}) interface{} {
		return newIPv6AddrTracer(in.(iaas.IPv6AddrAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("License", func(in interface{}) interface{} {
		return newLicenseTracer(in.(iaas.LicenseAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("LicenseInfo", func(in interface{}) interface{} {
		return newLicenseInfoTracer(in.(iaas.LicenseInfoAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("LoadBalancer", func(in interface{}) interface{} {
		return newLoadBalancerTracer(in.(iaas.LoadBalancerAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("LocalRouter", func(in interface{}) interface{} {
		return newLocalRouterTracer(in.(iaas.LocalRouterAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("MobileGateway", func(in interface{}) interface{} {
		return newMobileGatewayTracer(in.(iaas.MobileGatewayAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("NFS", func(in interface{}) interface{} {
		return newNFSTracer(in.(iaas.NFSAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Note", func(in interface{}) interface{} {
		return newNoteTracer(in.(iaas.NoteAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("PacketFilter", func(in interface{}) interface{} {
		return newPacketFilterTracer(in.(iaas.PacketFilterAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("PrivateHost", func(in interface{}) interface{} {
		return newPrivateHostTracer(in.(iaas.PrivateHostAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("PrivateHostPlan", func(in interface{}) interface{} {
		return newPrivateHostPlanTracer(in.(iaas.PrivateHostPlanAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("ProxyLB", func(in interface{}) interface{} {
		return newProxyLBTracer(in.(iaas.ProxyLBAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Region", func(in interface{}) interface{} {
		return newRegionTracer(in.(iaas.RegionAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Server", func(in interface{}) interface{} {
		return newServerTracer(in.(iaas.ServerAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("ServerPlan", func(in interface{}) interface{} {
		return newServerPlanTracer(in.(iaas.ServerPlanAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("ServiceClass", func(in interface{}) interface{} {
		return newServiceClassTracer(in.(iaas.ServiceClassAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("SIM", func(in interface{}) interface{} {
		return newSIMTracer(in.(iaas.SIMAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("SimpleMonitor", func(in interface{}) interface{} {
		return newSimpleMonitorTracer(in.(iaas.SimpleMonitorAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("SSHKey", func(in interface{}) interface{} {
		return newSSHKeyTracer(in.(iaas.SSHKeyAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Subnet", func(in interface{}) interface{} {
		return newSubnetTracer(in.(iaas.SubnetAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Switch", func(in interface{}) interface{} {
		return newSwitchTracer(in.(iaas.SwitchAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("VPCRouter", func(in interface{}) interface{} {
		return newVPCRouterTracer(in.(iaas.VPCRouterAPI), cnf)
	})
	iaas.AddClientFacotyHookFunc("Zone", func(in interface{}) interface{} {
		return newZoneTracer(in.(iaas.ZoneAPI), cnf)
	})
}

/*************************************************
* ArchiveTracer
*************************************************/

// ArchiveTracer is for trace ArchiveOp operations
type ArchiveTracer struct {
	Internal iaas.ArchiveAPI
	config   *config
}

// NewArchiveTracer creates new ArchiveTracer instance
func newArchiveTracer(in iaas.ArchiveAPI, cnf *config) iaas.ArchiveAPI {
	return &ArchiveTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *ArchiveTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.ArchiveFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *ArchiveTracer) Create(ctx context.Context, zone string, param *iaas.ArchiveCreateRequest) (*iaas.Archive, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultArchive, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultArchive", forceString(resultArchive)))

	}
	return resultArchive, err
}

// CreateBlank is API call with trace log
func (t *ArchiveTracer) CreateBlank(ctx context.Context, zone string, param *iaas.ArchiveCreateBlankRequest) (*iaas.Archive, *iaas.FTPServer, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.CreateBlank", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultArchive, resultFTPServer, err := t.Internal.CreateBlank(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultArchive", forceString(resultArchive)))
		span.SetAttributes(attribute.String("libiaas.api.results.resultFTPServer", forceString(resultFTPServer)))

	}
	return resultArchive, resultFTPServer, err
}

// Read is API call with trace log
func (t *ArchiveTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.Archive, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultArchive, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultArchive", forceString(resultArchive)))

	}
	return resultArchive, err
}

// Update is API call with trace log
func (t *ArchiveTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.ArchiveUpdateRequest) (*iaas.Archive, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultArchive, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultArchive", forceString(resultArchive)))

	}
	return resultArchive, err
}

// Delete is API call with trace log
func (t *ArchiveTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// OpenFTP is API call with trace log
func (t *ArchiveTracer) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *iaas.OpenFTPRequest) (*iaas.FTPServer, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.openOption", forceString(openOption)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.OpenFTP", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultFTPServer, err := t.Internal.OpenFTP(ctx, zone, id, openOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultFTPServer", forceString(resultFTPServer)))

	}
	return resultFTPServer, err
}

// CloseFTP is API call with trace log
func (t *ArchiveTracer) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.CloseFTP", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.CloseFTP(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Share is API call with trace log
func (t *ArchiveTracer) Share(ctx context.Context, zone string, id types.ID) (*iaas.ArchiveShareInfo, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.Share", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultArchiveShareInfo, err := t.Internal.Share(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultArchiveShareInfo", forceString(resultArchiveShareInfo)))

	}
	return resultArchiveShareInfo, err
}

// CreateFromShared is API call with trace log
func (t *ArchiveTracer) CreateFromShared(ctx context.Context, zone string, sourceArchiveID types.ID, destZoneID types.ID, param *iaas.ArchiveCreateRequestFromShared) (*iaas.Archive, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.sourceArchiveID", forceString(sourceArchiveID)),
		attribute.String("libiaas.api.arguments.destZoneID", forceString(destZoneID)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.CreateFromShared", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultArchive, err := t.Internal.CreateFromShared(ctx, zone, sourceArchiveID, destZoneID, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultArchive", forceString(resultArchive)))

	}
	return resultArchive, err
}

// Transfer is API call with trace log
func (t *ArchiveTracer) Transfer(ctx context.Context, zone string, sourceArchiveID types.ID, destZoneID types.ID, param *iaas.ArchiveTransferRequest) (*iaas.Archive, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.sourceArchiveID", forceString(sourceArchiveID)),
		attribute.String("libiaas.api.arguments.destZoneID", forceString(destZoneID)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ArchiveAPI.Transfer", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultArchive, err := t.Internal.Transfer(ctx, zone, sourceArchiveID, destZoneID, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultArchive", forceString(resultArchive)))

	}
	return resultArchive, err
}

/*************************************************
* AuthStatusTracer
*************************************************/

// AuthStatusTracer is for trace AuthStatusOp operations
type AuthStatusTracer struct {
	Internal iaas.AuthStatusAPI
	config   *config
}

// NewAuthStatusTracer creates new AuthStatusTracer instance
func newAuthStatusTracer(in iaas.AuthStatusAPI, cnf *config) iaas.AuthStatusAPI {
	return &AuthStatusTracer{
		Internal: in,
		config:   cnf,
	}
}

// Read is API call with trace log
func (t *AuthStatusTracer) Read(ctx context.Context) (*iaas.AuthStatus, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes())
	ctx, span = t.config.Tracer.Start(ctx, "AuthStatusAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAuthStatus, err := t.Internal.Read(ctx)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAuthStatus", forceString(resultAuthStatus)))

	}
	return resultAuthStatus, err
}

/*************************************************
* AutoBackupTracer
*************************************************/

// AutoBackupTracer is for trace AutoBackupOp operations
type AutoBackupTracer struct {
	Internal iaas.AutoBackupAPI
	config   *config
}

// NewAutoBackupTracer creates new AutoBackupTracer instance
func newAutoBackupTracer(in iaas.AutoBackupAPI, cnf *config) iaas.AutoBackupAPI {
	return &AutoBackupTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *AutoBackupTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.AutoBackupFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoBackupAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *AutoBackupTracer) Create(ctx context.Context, zone string, param *iaas.AutoBackupCreateRequest) (*iaas.AutoBackup, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoBackupAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAutoBackup, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAutoBackup", forceString(resultAutoBackup)))

	}
	return resultAutoBackup, err
}

// Read is API call with trace log
func (t *AutoBackupTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.AutoBackup, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoBackupAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAutoBackup, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAutoBackup", forceString(resultAutoBackup)))

	}
	return resultAutoBackup, err
}

// Update is API call with trace log
func (t *AutoBackupTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.AutoBackupUpdateRequest) (*iaas.AutoBackup, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoBackupAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAutoBackup, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAutoBackup", forceString(resultAutoBackup)))

	}
	return resultAutoBackup, err
}

// UpdateSettings is API call with trace log
func (t *AutoBackupTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *iaas.AutoBackupUpdateSettingsRequest) (*iaas.AutoBackup, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoBackupAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAutoBackup, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAutoBackup", forceString(resultAutoBackup)))

	}
	return resultAutoBackup, err
}

// Delete is API call with trace log
func (t *AutoBackupTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoBackupAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* AutoScaleTracer
*************************************************/

// AutoScaleTracer is for trace AutoScaleOp operations
type AutoScaleTracer struct {
	Internal iaas.AutoScaleAPI
	config   *config
}

// NewAutoScaleTracer creates new AutoScaleTracer instance
func newAutoScaleTracer(in iaas.AutoScaleAPI, cnf *config) iaas.AutoScaleAPI {
	return &AutoScaleTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *AutoScaleTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.AutoScaleFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoScaleAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *AutoScaleTracer) Create(ctx context.Context, param *iaas.AutoScaleCreateRequest) (*iaas.AutoScale, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoScaleAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAutoScale, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAutoScale", forceString(resultAutoScale)))

	}
	return resultAutoScale, err
}

// Read is API call with trace log
func (t *AutoScaleTracer) Read(ctx context.Context, id types.ID) (*iaas.AutoScale, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoScaleAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAutoScale, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAutoScale", forceString(resultAutoScale)))

	}
	return resultAutoScale, err
}

// Update is API call with trace log
func (t *AutoScaleTracer) Update(ctx context.Context, id types.ID, param *iaas.AutoScaleUpdateRequest) (*iaas.AutoScale, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoScaleAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAutoScale, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAutoScale", forceString(resultAutoScale)))

	}
	return resultAutoScale, err
}

// UpdateSettings is API call with trace log
func (t *AutoScaleTracer) UpdateSettings(ctx context.Context, id types.ID, param *iaas.AutoScaleUpdateSettingsRequest) (*iaas.AutoScale, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoScaleAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAutoScale, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAutoScale", forceString(resultAutoScale)))

	}
	return resultAutoScale, err
}

// Delete is API call with trace log
func (t *AutoScaleTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoScaleAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Status is API call with trace log
func (t *AutoScaleTracer) Status(ctx context.Context, id types.ID) (*iaas.AutoScaleStatus, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoScaleAPI.Status", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultAutoScaleStatus, err := t.Internal.Status(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultAutoScaleStatus", forceString(resultAutoScaleStatus)))

	}
	return resultAutoScaleStatus, err
}

// ScaleUp is API call with trace log
func (t *AutoScaleTracer) ScaleUp(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoScaleAPI.ScaleUp", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ScaleUp(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ScaleDown is API call with trace log
func (t *AutoScaleTracer) ScaleDown(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "AutoScaleAPI.ScaleDown", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ScaleDown(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* BillTracer
*************************************************/

// BillTracer is for trace BillOp operations
type BillTracer struct {
	Internal iaas.BillAPI
	config   *config
}

// NewBillTracer creates new BillTracer instance
func newBillTracer(in iaas.BillAPI, cnf *config) iaas.BillAPI {
	return &BillTracer{
		Internal: in,
		config:   cnf,
	}
}

// ByContract is API call with trace log
func (t *BillTracer) ByContract(ctx context.Context, accountID types.ID) (*iaas.BillByContractResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.accountID", forceString(accountID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BillAPI.ByContract", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.ByContract(ctx, accountID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// ByContractYear is API call with trace log
func (t *BillTracer) ByContractYear(ctx context.Context, accountID types.ID, year int) (*iaas.BillByContractYearResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.accountID", forceString(accountID)),
		attribute.String("libiaas.api.arguments.year", forceString(year)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BillAPI.ByContractYear", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.ByContractYear(ctx, accountID, year)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// ByContractYearMonth is API call with trace log
func (t *BillTracer) ByContractYearMonth(ctx context.Context, accountID types.ID, year int, month int) (*iaas.BillByContractYearMonthResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.accountID", forceString(accountID)),
		attribute.String("libiaas.api.arguments.year", forceString(year)),
		attribute.String("libiaas.api.arguments.month", forceString(month)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BillAPI.ByContractYearMonth", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.ByContractYearMonth(ctx, accountID, year, month)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *BillTracer) Read(ctx context.Context, id types.ID) (*iaas.BillReadResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BillAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Details is API call with trace log
func (t *BillTracer) Details(ctx context.Context, MemberCode string, id types.ID) (*iaas.BillDetailsResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.MemberCode", forceString(MemberCode)),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BillAPI.Details", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Details(ctx, MemberCode, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// DetailsCSV is API call with trace log
func (t *BillTracer) DetailsCSV(ctx context.Context, MemberCode string, id types.ID) (*iaas.BillDetailCSV, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.MemberCode", forceString(MemberCode)),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BillAPI.DetailsCSV", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultBillDetailCSV, err := t.Internal.DetailsCSV(ctx, MemberCode, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultBillDetailCSV", forceString(resultBillDetailCSV)))

	}
	return resultBillDetailCSV, err
}

/*************************************************
* BridgeTracer
*************************************************/

// BridgeTracer is for trace BridgeOp operations
type BridgeTracer struct {
	Internal iaas.BridgeAPI
	config   *config
}

// NewBridgeTracer creates new BridgeTracer instance
func newBridgeTracer(in iaas.BridgeAPI, cnf *config) iaas.BridgeAPI {
	return &BridgeTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *BridgeTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.BridgeFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BridgeAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *BridgeTracer) Create(ctx context.Context, zone string, param *iaas.BridgeCreateRequest) (*iaas.Bridge, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BridgeAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultBridge, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultBridge", forceString(resultBridge)))

	}
	return resultBridge, err
}

// Read is API call with trace log
func (t *BridgeTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.Bridge, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BridgeAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultBridge, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultBridge", forceString(resultBridge)))

	}
	return resultBridge, err
}

// Update is API call with trace log
func (t *BridgeTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.BridgeUpdateRequest) (*iaas.Bridge, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BridgeAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultBridge, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultBridge", forceString(resultBridge)))

	}
	return resultBridge, err
}

// Delete is API call with trace log
func (t *BridgeTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "BridgeAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* CDROMTracer
*************************************************/

// CDROMTracer is for trace CDROMOp operations
type CDROMTracer struct {
	Internal iaas.CDROMAPI
	config   *config
}

// NewCDROMTracer creates new CDROMTracer instance
func newCDROMTracer(in iaas.CDROMAPI, cnf *config) iaas.CDROMAPI {
	return &CDROMTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *CDROMTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.CDROMFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CDROMAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *CDROMTracer) Create(ctx context.Context, zone string, param *iaas.CDROMCreateRequest) (*iaas.CDROM, *iaas.FTPServer, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CDROMAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCDROM, resultFTPServer, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCDROM", forceString(resultCDROM)))
		span.SetAttributes(attribute.String("libiaas.api.results.resultFTPServer", forceString(resultFTPServer)))

	}
	return resultCDROM, resultFTPServer, err
}

// Read is API call with trace log
func (t *CDROMTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.CDROM, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CDROMAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCDROM, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCDROM", forceString(resultCDROM)))

	}
	return resultCDROM, err
}

// Update is API call with trace log
func (t *CDROMTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.CDROMUpdateRequest) (*iaas.CDROM, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CDROMAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCDROM, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCDROM", forceString(resultCDROM)))

	}
	return resultCDROM, err
}

// Delete is API call with trace log
func (t *CDROMTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CDROMAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// OpenFTP is API call with trace log
func (t *CDROMTracer) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *iaas.OpenFTPRequest) (*iaas.FTPServer, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.openOption", forceString(openOption)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CDROMAPI.OpenFTP", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultFTPServer, err := t.Internal.OpenFTP(ctx, zone, id, openOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultFTPServer", forceString(resultFTPServer)))

	}
	return resultFTPServer, err
}

// CloseFTP is API call with trace log
func (t *CDROMTracer) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CDROMAPI.CloseFTP", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.CloseFTP(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* CertificateAuthorityTracer
*************************************************/

// CertificateAuthorityTracer is for trace CertificateAuthorityOp operations
type CertificateAuthorityTracer struct {
	Internal iaas.CertificateAuthorityAPI
	config   *config
}

// NewCertificateAuthorityTracer creates new CertificateAuthorityTracer instance
func newCertificateAuthorityTracer(in iaas.CertificateAuthorityAPI, cnf *config) iaas.CertificateAuthorityAPI {
	return &CertificateAuthorityTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *CertificateAuthorityTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.CertificateAuthorityFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *CertificateAuthorityTracer) Create(ctx context.Context, param *iaas.CertificateAuthorityCreateRequest) (*iaas.CertificateAuthority, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCertificateAuthority, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCertificateAuthority", forceString(resultCertificateAuthority)))

	}
	return resultCertificateAuthority, err
}

// Read is API call with trace log
func (t *CertificateAuthorityTracer) Read(ctx context.Context, id types.ID) (*iaas.CertificateAuthority, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCertificateAuthority, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCertificateAuthority", forceString(resultCertificateAuthority)))

	}
	return resultCertificateAuthority, err
}

// Update is API call with trace log
func (t *CertificateAuthorityTracer) Update(ctx context.Context, id types.ID, param *iaas.CertificateAuthorityUpdateRequest) (*iaas.CertificateAuthority, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCertificateAuthority, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCertificateAuthority", forceString(resultCertificateAuthority)))

	}
	return resultCertificateAuthority, err
}

// Delete is API call with trace log
func (t *CertificateAuthorityTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Detail is API call with trace log
func (t *CertificateAuthorityTracer) Detail(ctx context.Context, id types.ID) (*iaas.CertificateAuthorityDetail, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.Detail", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCertificateAuthority, err := t.Internal.Detail(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCertificateAuthority", forceString(resultCertificateAuthority)))

	}
	return resultCertificateAuthority, err
}

// AddClient is API call with trace log
func (t *CertificateAuthorityTracer) AddClient(ctx context.Context, id types.ID, param *iaas.CertificateAuthorityAddClientParam) (*iaas.CertificateAuthorityAddClientOrServerResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.AddClient", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCertificateAuthority, err := t.Internal.AddClient(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCertificateAuthority", forceString(resultCertificateAuthority)))

	}
	return resultCertificateAuthority, err
}

// ListClients is API call with trace log
func (t *CertificateAuthorityTracer) ListClients(ctx context.Context, id types.ID) (*iaas.CertificateAuthorityListClientsResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.ListClients", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.ListClients(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// ReadClient is API call with trace log
func (t *CertificateAuthorityTracer) ReadClient(ctx context.Context, id types.ID, clientID string) (*iaas.CertificateAuthorityClient, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.clientID", forceString(clientID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.ReadClient", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCertificateAuthority, err := t.Internal.ReadClient(ctx, id, clientID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCertificateAuthority", forceString(resultCertificateAuthority)))

	}
	return resultCertificateAuthority, err
}

// RevokeClient is API call with trace log
func (t *CertificateAuthorityTracer) RevokeClient(ctx context.Context, id types.ID, clientID string) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.clientID", forceString(clientID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.RevokeClient", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.RevokeClient(ctx, id, clientID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// HoldClient is API call with trace log
func (t *CertificateAuthorityTracer) HoldClient(ctx context.Context, id types.ID, clientID string) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.clientID", forceString(clientID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.HoldClient", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.HoldClient(ctx, id, clientID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ResumeClient is API call with trace log
func (t *CertificateAuthorityTracer) ResumeClient(ctx context.Context, id types.ID, clientID string) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.clientID", forceString(clientID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.ResumeClient", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ResumeClient(ctx, id, clientID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DenyClient is API call with trace log
func (t *CertificateAuthorityTracer) DenyClient(ctx context.Context, id types.ID, clientID string) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.clientID", forceString(clientID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.DenyClient", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DenyClient(ctx, id, clientID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// AddServer is API call with trace log
func (t *CertificateAuthorityTracer) AddServer(ctx context.Context, id types.ID, param *iaas.CertificateAuthorityAddServerParam) (*iaas.CertificateAuthorityAddClientOrServerResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.AddServer", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCertificateAuthority, err := t.Internal.AddServer(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCertificateAuthority", forceString(resultCertificateAuthority)))

	}
	return resultCertificateAuthority, err
}

// ListServers is API call with trace log
func (t *CertificateAuthorityTracer) ListServers(ctx context.Context, id types.ID) (*iaas.CertificateAuthorityListServersResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.ListServers", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.ListServers(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// ReadServer is API call with trace log
func (t *CertificateAuthorityTracer) ReadServer(ctx context.Context, id types.ID, serverID string) (*iaas.CertificateAuthorityServer, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.serverID", forceString(serverID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.ReadServer", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCertificateAuthority, err := t.Internal.ReadServer(ctx, id, serverID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCertificateAuthority", forceString(resultCertificateAuthority)))

	}
	return resultCertificateAuthority, err
}

// RevokeServer is API call with trace log
func (t *CertificateAuthorityTracer) RevokeServer(ctx context.Context, id types.ID, serverID string) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.serverID", forceString(serverID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.RevokeServer", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.RevokeServer(ctx, id, serverID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// HoldServer is API call with trace log
func (t *CertificateAuthorityTracer) HoldServer(ctx context.Context, id types.ID, serverID string) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.serverID", forceString(serverID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.HoldServer", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.HoldServer(ctx, id, serverID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ResumeServer is API call with trace log
func (t *CertificateAuthorityTracer) ResumeServer(ctx context.Context, id types.ID, serverID string) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.serverID", forceString(serverID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CertificateAuthorityAPI.ResumeServer", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ResumeServer(ctx, id, serverID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* ContainerRegistryTracer
*************************************************/

// ContainerRegistryTracer is for trace ContainerRegistryOp operations
type ContainerRegistryTracer struct {
	Internal iaas.ContainerRegistryAPI
	config   *config
}

// NewContainerRegistryTracer creates new ContainerRegistryTracer instance
func newContainerRegistryTracer(in iaas.ContainerRegistryAPI, cnf *config) iaas.ContainerRegistryAPI {
	return &ContainerRegistryTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *ContainerRegistryTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.ContainerRegistryFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *ContainerRegistryTracer) Create(ctx context.Context, param *iaas.ContainerRegistryCreateRequest) (*iaas.ContainerRegistry, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultContainerRegistry, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultContainerRegistry", forceString(resultContainerRegistry)))

	}
	return resultContainerRegistry, err
}

// Read is API call with trace log
func (t *ContainerRegistryTracer) Read(ctx context.Context, id types.ID) (*iaas.ContainerRegistry, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultContainerRegistry, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultContainerRegistry", forceString(resultContainerRegistry)))

	}
	return resultContainerRegistry, err
}

// Update is API call with trace log
func (t *ContainerRegistryTracer) Update(ctx context.Context, id types.ID, param *iaas.ContainerRegistryUpdateRequest) (*iaas.ContainerRegistry, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultContainerRegistry, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultContainerRegistry", forceString(resultContainerRegistry)))

	}
	return resultContainerRegistry, err
}

// UpdateSettings is API call with trace log
func (t *ContainerRegistryTracer) UpdateSettings(ctx context.Context, id types.ID, param *iaas.ContainerRegistryUpdateSettingsRequest) (*iaas.ContainerRegistry, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultContainerRegistry, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultContainerRegistry", forceString(resultContainerRegistry)))

	}
	return resultContainerRegistry, err
}

// Delete is API call with trace log
func (t *ContainerRegistryTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ListUsers is API call with trace log
func (t *ContainerRegistryTracer) ListUsers(ctx context.Context, id types.ID) (*iaas.ContainerRegistryUsers, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.ListUsers", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultContainerRegistryUsers, err := t.Internal.ListUsers(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultContainerRegistryUsers", forceString(resultContainerRegistryUsers)))

	}
	return resultContainerRegistryUsers, err
}

// AddUser is API call with trace log
func (t *ContainerRegistryTracer) AddUser(ctx context.Context, id types.ID, param *iaas.ContainerRegistryUserCreateRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.AddUser", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.AddUser(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// UpdateUser is API call with trace log
func (t *ContainerRegistryTracer) UpdateUser(ctx context.Context, id types.ID, username string, param *iaas.ContainerRegistryUserUpdateRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.username", forceString(username)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.UpdateUser", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.UpdateUser(ctx, id, username, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DeleteUser is API call with trace log
func (t *ContainerRegistryTracer) DeleteUser(ctx context.Context, id types.ID, username string) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.username", forceString(username)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ContainerRegistryAPI.DeleteUser", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DeleteUser(ctx, id, username)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* CouponTracer
*************************************************/

// CouponTracer is for trace CouponOp operations
type CouponTracer struct {
	Internal iaas.CouponAPI
	config   *config
}

// NewCouponTracer creates new CouponTracer instance
func newCouponTracer(in iaas.CouponAPI, cnf *config) iaas.CouponAPI {
	return &CouponTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *CouponTracer) Find(ctx context.Context, accountID types.ID) (*iaas.CouponFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.accountID", forceString(accountID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "CouponAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, accountID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

/*************************************************
* DatabaseTracer
*************************************************/

// DatabaseTracer is for trace DatabaseOp operations
type DatabaseTracer struct {
	Internal iaas.DatabaseAPI
	config   *config
}

// NewDatabaseTracer creates new DatabaseTracer instance
func newDatabaseTracer(in iaas.DatabaseAPI, cnf *config) iaas.DatabaseAPI {
	return &DatabaseTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *DatabaseTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.DatabaseFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *DatabaseTracer) Create(ctx context.Context, zone string, param *iaas.DatabaseCreateRequest) (*iaas.Database, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDatabase, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDatabase", forceString(resultDatabase)))

	}
	return resultDatabase, err
}

// Read is API call with trace log
func (t *DatabaseTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.Database, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDatabase, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDatabase", forceString(resultDatabase)))

	}
	return resultDatabase, err
}

// Update is API call with trace log
func (t *DatabaseTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.DatabaseUpdateRequest) (*iaas.Database, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDatabase, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDatabase", forceString(resultDatabase)))

	}
	return resultDatabase, err
}

// UpdateSettings is API call with trace log
func (t *DatabaseTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *iaas.DatabaseUpdateSettingsRequest) (*iaas.Database, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDatabase, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDatabase", forceString(resultDatabase)))

	}
	return resultDatabase, err
}

// Delete is API call with trace log
func (t *DatabaseTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Config is API call with trace log
func (t *DatabaseTracer) Config(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Config", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Config(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Boot is API call with trace log
func (t *DatabaseTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Boot", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Shutdown is API call with trace log
func (t *DatabaseTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *iaas.ShutdownOption) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.shutdownOption", forceString(shutdownOption)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Shutdown", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Reset is API call with trace log
func (t *DatabaseTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Reset", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// MonitorCPU is API call with trace log
func (t *DatabaseTracer) MonitorCPU(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.CPUTimeActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.MonitorCPU", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCPUTimeActivity, err := t.Internal.MonitorCPU(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCPUTimeActivity", forceString(resultCPUTimeActivity)))

	}
	return resultCPUTimeActivity, err
}

// MonitorDisk is API call with trace log
func (t *DatabaseTracer) MonitorDisk(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.DiskActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.MonitorDisk", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDiskActivity, err := t.Internal.MonitorDisk(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDiskActivity", forceString(resultDiskActivity)))

	}
	return resultDiskActivity, err
}

// MonitorInterface is API call with trace log
func (t *DatabaseTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.InterfaceActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.MonitorInterface", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInterfaceActivity", forceString(resultInterfaceActivity)))

	}
	return resultInterfaceActivity, err
}

// MonitorDatabase is API call with trace log
func (t *DatabaseTracer) MonitorDatabase(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.DatabaseActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.MonitorDatabase", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDatabaseActivity, err := t.Internal.MonitorDatabase(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDatabaseActivity", forceString(resultDatabaseActivity)))

	}
	return resultDatabaseActivity, err
}

// Status is API call with trace log
func (t *DatabaseTracer) Status(ctx context.Context, zone string, id types.ID) (*iaas.DatabaseStatus, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.Status", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDatabaseStatus, err := t.Internal.Status(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDatabaseStatus", forceString(resultDatabaseStatus)))

	}
	return resultDatabaseStatus, err
}

// GetParameter is API call with trace log
func (t *DatabaseTracer) GetParameter(ctx context.Context, zone string, id types.ID) (*iaas.DatabaseParameter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.GetParameter", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDatabaseParameter, err := t.Internal.GetParameter(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDatabaseParameter", forceString(resultDatabaseParameter)))

	}
	return resultDatabaseParameter, err
}

// SetParameter is API call with trace log
func (t *DatabaseTracer) SetParameter(ctx context.Context, zone string, id types.ID, param map[string]interface{}) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DatabaseAPI.SetParameter", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.SetParameter(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* DiskTracer
*************************************************/

// DiskTracer is for trace DiskOp operations
type DiskTracer struct {
	Internal iaas.DiskAPI
	config   *config
}

// NewDiskTracer creates new DiskTracer instance
func newDiskTracer(in iaas.DiskAPI, cnf *config) iaas.DiskAPI {
	return &DiskTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *DiskTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.DiskFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *DiskTracer) Create(ctx context.Context, zone string, createParam *iaas.DiskCreateRequest, distantFrom []types.ID) (*iaas.Disk, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.createParam", forceString(createParam)),
		attribute.String("libiaas.api.arguments.distantFrom", forceString(distantFrom)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDisk, err := t.Internal.Create(ctx, zone, createParam, distantFrom)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDisk", forceString(resultDisk)))

	}
	return resultDisk, err
}

// Config is API call with trace log
func (t *DiskTracer) Config(ctx context.Context, zone string, id types.ID, edit *iaas.DiskEditRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.edit", forceString(edit)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.Config", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Config(ctx, zone, id, edit)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// CreateWithConfig is API call with trace log
func (t *DiskTracer) CreateWithConfig(ctx context.Context, zone string, createParam *iaas.DiskCreateRequest, editParam *iaas.DiskEditRequest, bootAtAvailable bool, distantFrom []types.ID) (*iaas.Disk, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.createParam", forceString(createParam)),
		attribute.String("libiaas.api.arguments.editParam", forceString(editParam)),
		attribute.String("libiaas.api.arguments.bootAtAvailable", forceString(bootAtAvailable)),
		attribute.String("libiaas.api.arguments.distantFrom", forceString(distantFrom)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.CreateWithConfig", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDisk, err := t.Internal.CreateWithConfig(ctx, zone, createParam, editParam, bootAtAvailable, distantFrom)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDisk", forceString(resultDisk)))

	}
	return resultDisk, err
}

// ResizePartition is API call with trace log
func (t *DiskTracer) ResizePartition(ctx context.Context, zone string, id types.ID, param *iaas.DiskResizePartitionRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.ResizePartition", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ResizePartition(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ConnectToServer is API call with trace log
func (t *DiskTracer) ConnectToServer(ctx context.Context, zone string, id types.ID, serverID types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.serverID", forceString(serverID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.ConnectToServer", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ConnectToServer(ctx, zone, id, serverID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DisconnectFromServer is API call with trace log
func (t *DiskTracer) DisconnectFromServer(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.DisconnectFromServer", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DisconnectFromServer(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Read is API call with trace log
func (t *DiskTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.Disk, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDisk, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDisk", forceString(resultDisk)))

	}
	return resultDisk, err
}

// Update is API call with trace log
func (t *DiskTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.DiskUpdateRequest) (*iaas.Disk, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDisk, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDisk", forceString(resultDisk)))

	}
	return resultDisk, err
}

// Delete is API call with trace log
func (t *DiskTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Monitor is API call with trace log
func (t *DiskTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.DiskActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.Monitor", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDiskActivity, err := t.Internal.Monitor(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDiskActivity", forceString(resultDiskActivity)))

	}
	return resultDiskActivity, err
}

// MonitorDisk is API call with trace log
func (t *DiskTracer) MonitorDisk(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.DiskActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskAPI.MonitorDisk", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDiskActivity, err := t.Internal.MonitorDisk(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDiskActivity", forceString(resultDiskActivity)))

	}
	return resultDiskActivity, err
}

/*************************************************
* DiskPlanTracer
*************************************************/

// DiskPlanTracer is for trace DiskPlanOp operations
type DiskPlanTracer struct {
	Internal iaas.DiskPlanAPI
	config   *config
}

// NewDiskPlanTracer creates new DiskPlanTracer instance
func newDiskPlanTracer(in iaas.DiskPlanAPI, cnf *config) iaas.DiskPlanAPI {
	return &DiskPlanTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *DiskPlanTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.DiskPlanFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskPlanAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *DiskPlanTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.DiskPlan, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DiskPlanAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDiskPlan, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDiskPlan", forceString(resultDiskPlan)))

	}
	return resultDiskPlan, err
}

/*************************************************
* DNSTracer
*************************************************/

// DNSTracer is for trace DNSOp operations
type DNSTracer struct {
	Internal iaas.DNSAPI
	config   *config
}

// NewDNSTracer creates new DNSTracer instance
func newDNSTracer(in iaas.DNSAPI, cnf *config) iaas.DNSAPI {
	return &DNSTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *DNSTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.DNSFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DNSAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *DNSTracer) Create(ctx context.Context, param *iaas.DNSCreateRequest) (*iaas.DNS, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DNSAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDNS, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDNS", forceString(resultDNS)))

	}
	return resultDNS, err
}

// Read is API call with trace log
func (t *DNSTracer) Read(ctx context.Context, id types.ID) (*iaas.DNS, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DNSAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDNS, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDNS", forceString(resultDNS)))

	}
	return resultDNS, err
}

// Update is API call with trace log
func (t *DNSTracer) Update(ctx context.Context, id types.ID, param *iaas.DNSUpdateRequest) (*iaas.DNS, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DNSAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDNS, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDNS", forceString(resultDNS)))

	}
	return resultDNS, err
}

// UpdateSettings is API call with trace log
func (t *DNSTracer) UpdateSettings(ctx context.Context, id types.ID, param *iaas.DNSUpdateSettingsRequest) (*iaas.DNS, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DNSAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultDNS, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultDNS", forceString(resultDNS)))

	}
	return resultDNS, err
}

// Delete is API call with trace log
func (t *DNSTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "DNSAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* EnhancedDBTracer
*************************************************/

// EnhancedDBTracer is for trace EnhancedDBOp operations
type EnhancedDBTracer struct {
	Internal iaas.EnhancedDBAPI
	config   *config
}

// NewEnhancedDBTracer creates new EnhancedDBTracer instance
func newEnhancedDBTracer(in iaas.EnhancedDBAPI, cnf *config) iaas.EnhancedDBAPI {
	return &EnhancedDBTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *EnhancedDBTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.EnhancedDBFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "EnhancedDBAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *EnhancedDBTracer) Create(ctx context.Context, param *iaas.EnhancedDBCreateRequest) (*iaas.EnhancedDB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "EnhancedDBAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultEnhancedDB, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultEnhancedDB", forceString(resultEnhancedDB)))

	}
	return resultEnhancedDB, err
}

// Read is API call with trace log
func (t *EnhancedDBTracer) Read(ctx context.Context, id types.ID) (*iaas.EnhancedDB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "EnhancedDBAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultEnhancedDB, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultEnhancedDB", forceString(resultEnhancedDB)))

	}
	return resultEnhancedDB, err
}

// Update is API call with trace log
func (t *EnhancedDBTracer) Update(ctx context.Context, id types.ID, param *iaas.EnhancedDBUpdateRequest) (*iaas.EnhancedDB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "EnhancedDBAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultEnhancedDB, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultEnhancedDB", forceString(resultEnhancedDB)))

	}
	return resultEnhancedDB, err
}

// Delete is API call with trace log
func (t *EnhancedDBTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "EnhancedDBAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// SetPassword is API call with trace log
func (t *EnhancedDBTracer) SetPassword(ctx context.Context, id types.ID, param *iaas.EnhancedDBSetPasswordRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "EnhancedDBAPI.SetPassword", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.SetPassword(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* ESMETracer
*************************************************/

// ESMETracer is for trace ESMEOp operations
type ESMETracer struct {
	Internal iaas.ESMEAPI
	config   *config
}

// NewESMETracer creates new ESMETracer instance
func newESMETracer(in iaas.ESMEAPI, cnf *config) iaas.ESMEAPI {
	return &ESMETracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *ESMETracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.ESMEFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ESMEAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *ESMETracer) Create(ctx context.Context, param *iaas.ESMECreateRequest) (*iaas.ESME, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ESMEAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultESME, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultESME", forceString(resultESME)))

	}
	return resultESME, err
}

// Read is API call with trace log
func (t *ESMETracer) Read(ctx context.Context, id types.ID) (*iaas.ESME, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ESMEAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultESME, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultESME", forceString(resultESME)))

	}
	return resultESME, err
}

// Update is API call with trace log
func (t *ESMETracer) Update(ctx context.Context, id types.ID, param *iaas.ESMEUpdateRequest) (*iaas.ESME, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ESMEAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultESME, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultESME", forceString(resultESME)))

	}
	return resultESME, err
}

// Delete is API call with trace log
func (t *ESMETracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ESMEAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// SendMessageWithGeneratedOTP is API call with trace log
func (t *ESMETracer) SendMessageWithGeneratedOTP(ctx context.Context, id types.ID, param *iaas.ESMESendMessageWithGeneratedOTPRequest) (*iaas.ESMESendMessageResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ESMEAPI.SendMessageWithGeneratedOTP", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultESMESendMessageResult, err := t.Internal.SendMessageWithGeneratedOTP(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultESMESendMessageResult", forceString(resultESMESendMessageResult)))

	}
	return resultESMESendMessageResult, err
}

// SendMessageWithInputtedOTP is API call with trace log
func (t *ESMETracer) SendMessageWithInputtedOTP(ctx context.Context, id types.ID, param *iaas.ESMESendMessageWithInputtedOTPRequest) (*iaas.ESMESendMessageResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ESMEAPI.SendMessageWithInputtedOTP", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultESMESendMessageResult, err := t.Internal.SendMessageWithInputtedOTP(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultESMESendMessageResult", forceString(resultESMESendMessageResult)))

	}
	return resultESMESendMessageResult, err
}

// Logs is API call with trace log
func (t *ESMETracer) Logs(ctx context.Context, id types.ID) ([]*iaas.ESMELogs, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ESMEAPI.Logs", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLogs, err := t.Internal.Logs(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLogs", forceString(resultLogs)))

	}
	return resultLogs, err
}

/*************************************************
* GSLBTracer
*************************************************/

// GSLBTracer is for trace GSLBOp operations
type GSLBTracer struct {
	Internal iaas.GSLBAPI
	config   *config
}

// NewGSLBTracer creates new GSLBTracer instance
func newGSLBTracer(in iaas.GSLBAPI, cnf *config) iaas.GSLBAPI {
	return &GSLBTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *GSLBTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.GSLBFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "GSLBAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *GSLBTracer) Create(ctx context.Context, param *iaas.GSLBCreateRequest) (*iaas.GSLB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "GSLBAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultGSLB, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultGSLB", forceString(resultGSLB)))

	}
	return resultGSLB, err
}

// Read is API call with trace log
func (t *GSLBTracer) Read(ctx context.Context, id types.ID) (*iaas.GSLB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "GSLBAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultGSLB, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultGSLB", forceString(resultGSLB)))

	}
	return resultGSLB, err
}

// Update is API call with trace log
func (t *GSLBTracer) Update(ctx context.Context, id types.ID, param *iaas.GSLBUpdateRequest) (*iaas.GSLB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "GSLBAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultGSLB, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultGSLB", forceString(resultGSLB)))

	}
	return resultGSLB, err
}

// UpdateSettings is API call with trace log
func (t *GSLBTracer) UpdateSettings(ctx context.Context, id types.ID, param *iaas.GSLBUpdateSettingsRequest) (*iaas.GSLB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "GSLBAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultGSLB, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultGSLB", forceString(resultGSLB)))

	}
	return resultGSLB, err
}

// Delete is API call with trace log
func (t *GSLBTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "GSLBAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* IconTracer
*************************************************/

// IconTracer is for trace IconOp operations
type IconTracer struct {
	Internal iaas.IconAPI
	config   *config
}

// NewIconTracer creates new IconTracer instance
func newIconTracer(in iaas.IconAPI, cnf *config) iaas.IconAPI {
	return &IconTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *IconTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.IconFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IconAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *IconTracer) Create(ctx context.Context, param *iaas.IconCreateRequest) (*iaas.Icon, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IconAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIcon, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIcon", forceString(resultIcon)))

	}
	return resultIcon, err
}

// Read is API call with trace log
func (t *IconTracer) Read(ctx context.Context, id types.ID) (*iaas.Icon, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IconAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIcon, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIcon", forceString(resultIcon)))

	}
	return resultIcon, err
}

// Update is API call with trace log
func (t *IconTracer) Update(ctx context.Context, id types.ID, param *iaas.IconUpdateRequest) (*iaas.Icon, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IconAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIcon, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIcon", forceString(resultIcon)))

	}
	return resultIcon, err
}

// Delete is API call with trace log
func (t *IconTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IconAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* InterfaceTracer
*************************************************/

// InterfaceTracer is for trace InterfaceOp operations
type InterfaceTracer struct {
	Internal iaas.InterfaceAPI
	config   *config
}

// NewInterfaceTracer creates new InterfaceTracer instance
func newInterfaceTracer(in iaas.InterfaceAPI, cnf *config) iaas.InterfaceAPI {
	return &InterfaceTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *InterfaceTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.InterfaceFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *InterfaceTracer) Create(ctx context.Context, zone string, param *iaas.InterfaceCreateRequest) (*iaas.Interface, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInterface, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInterface", forceString(resultInterface)))

	}
	return resultInterface, err
}

// Read is API call with trace log
func (t *InterfaceTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.Interface, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInterface, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInterface", forceString(resultInterface)))

	}
	return resultInterface, err
}

// Update is API call with trace log
func (t *InterfaceTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.InterfaceUpdateRequest) (*iaas.Interface, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInterface, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInterface", forceString(resultInterface)))

	}
	return resultInterface, err
}

// Delete is API call with trace log
func (t *InterfaceTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Monitor is API call with trace log
func (t *InterfaceTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.InterfaceActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.Monitor", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInterfaceActivity, err := t.Internal.Monitor(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInterfaceActivity", forceString(resultInterfaceActivity)))

	}
	return resultInterfaceActivity, err
}

// ConnectToSharedSegment is API call with trace log
func (t *InterfaceTracer) ConnectToSharedSegment(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.ConnectToSharedSegment", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ConnectToSharedSegment(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ConnectToSwitch is API call with trace log
func (t *InterfaceTracer) ConnectToSwitch(ctx context.Context, zone string, id types.ID, switchID types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.switchID", forceString(switchID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.ConnectToSwitch", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ConnectToSwitch(ctx, zone, id, switchID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DisconnectFromSwitch is API call with trace log
func (t *InterfaceTracer) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.DisconnectFromSwitch", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DisconnectFromSwitch(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ConnectToPacketFilter is API call with trace log
func (t *InterfaceTracer) ConnectToPacketFilter(ctx context.Context, zone string, id types.ID, packetFilterID types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.packetFilterID", forceString(packetFilterID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.ConnectToPacketFilter", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ConnectToPacketFilter(ctx, zone, id, packetFilterID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DisconnectFromPacketFilter is API call with trace log
func (t *InterfaceTracer) DisconnectFromPacketFilter(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InterfaceAPI.DisconnectFromPacketFilter", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DisconnectFromPacketFilter(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* InternetTracer
*************************************************/

// InternetTracer is for trace InternetOp operations
type InternetTracer struct {
	Internal iaas.InternetAPI
	config   *config
}

// NewInternetTracer creates new InternetTracer instance
func newInternetTracer(in iaas.InternetAPI, cnf *config) iaas.InternetAPI {
	return &InternetTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *InternetTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.InternetFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *InternetTracer) Create(ctx context.Context, zone string, param *iaas.InternetCreateRequest) (*iaas.Internet, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInternet, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInternet", forceString(resultInternet)))

	}
	return resultInternet, err
}

// Read is API call with trace log
func (t *InternetTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.Internet, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInternet, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInternet", forceString(resultInternet)))

	}
	return resultInternet, err
}

// Update is API call with trace log
func (t *InternetTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.InternetUpdateRequest) (*iaas.Internet, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInternet, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInternet", forceString(resultInternet)))

	}
	return resultInternet, err
}

// Delete is API call with trace log
func (t *InternetTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// UpdateBandWidth is API call with trace log
func (t *InternetTracer) UpdateBandWidth(ctx context.Context, zone string, id types.ID, param *iaas.InternetUpdateBandWidthRequest) (*iaas.Internet, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.UpdateBandWidth", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInternet, err := t.Internal.UpdateBandWidth(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInternet", forceString(resultInternet)))

	}
	return resultInternet, err
}

// AddSubnet is API call with trace log
func (t *InternetTracer) AddSubnet(ctx context.Context, zone string, id types.ID, param *iaas.InternetAddSubnetRequest) (*iaas.InternetSubnetOperationResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.AddSubnet", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSubnet, err := t.Internal.AddSubnet(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSubnet", forceString(resultSubnet)))

	}
	return resultSubnet, err
}

// UpdateSubnet is API call with trace log
func (t *InternetTracer) UpdateSubnet(ctx context.Context, zone string, id types.ID, subnetID types.ID, param *iaas.InternetUpdateSubnetRequest) (*iaas.InternetSubnetOperationResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.subnetID", forceString(subnetID)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.UpdateSubnet", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSubnet, err := t.Internal.UpdateSubnet(ctx, zone, id, subnetID, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSubnet", forceString(resultSubnet)))

	}
	return resultSubnet, err
}

// DeleteSubnet is API call with trace log
func (t *InternetTracer) DeleteSubnet(ctx context.Context, zone string, id types.ID, subnetID types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.subnetID", forceString(subnetID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.DeleteSubnet", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DeleteSubnet(ctx, zone, id, subnetID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Monitor is API call with trace log
func (t *InternetTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.RouterActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.Monitor", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultRouterActivity, err := t.Internal.Monitor(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultRouterActivity", forceString(resultRouterActivity)))

	}
	return resultRouterActivity, err
}

// MonitorRouter is API call with trace log
func (t *InternetTracer) MonitorRouter(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.RouterActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.MonitorRouter", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultRouterActivity, err := t.Internal.MonitorRouter(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultRouterActivity", forceString(resultRouterActivity)))

	}
	return resultRouterActivity, err
}

// EnableIPv6 is API call with trace log
func (t *InternetTracer) EnableIPv6(ctx context.Context, zone string, id types.ID) (*iaas.IPv6NetInfo, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.EnableIPv6", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIPv6Net, err := t.Internal.EnableIPv6(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIPv6Net", forceString(resultIPv6Net)))

	}
	return resultIPv6Net, err
}

// DisableIPv6 is API call with trace log
func (t *InternetTracer) DisableIPv6(ctx context.Context, zone string, id types.ID, ipv6netID types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.ipv6netID", forceString(ipv6netID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetAPI.DisableIPv6", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DisableIPv6(ctx, zone, id, ipv6netID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* InternetPlanTracer
*************************************************/

// InternetPlanTracer is for trace InternetPlanOp operations
type InternetPlanTracer struct {
	Internal iaas.InternetPlanAPI
	config   *config
}

// NewInternetPlanTracer creates new InternetPlanTracer instance
func newInternetPlanTracer(in iaas.InternetPlanAPI, cnf *config) iaas.InternetPlanAPI {
	return &InternetPlanTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *InternetPlanTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.InternetPlanFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetPlanAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *InternetPlanTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.InternetPlan, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "InternetPlanAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInternetPlan, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInternetPlan", forceString(resultInternetPlan)))

	}
	return resultInternetPlan, err
}

/*************************************************
* IPAddressTracer
*************************************************/

// IPAddressTracer is for trace IPAddressOp operations
type IPAddressTracer struct {
	Internal iaas.IPAddressAPI
	config   *config
}

// NewIPAddressTracer creates new IPAddressTracer instance
func newIPAddressTracer(in iaas.IPAddressAPI, cnf *config) iaas.IPAddressAPI {
	return &IPAddressTracer{
		Internal: in,
		config:   cnf,
	}
}

// List is API call with trace log
func (t *IPAddressTracer) List(ctx context.Context, zone string) (*iaas.IPAddressListResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPAddressAPI.List", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.List(ctx, zone)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *IPAddressTracer) Read(ctx context.Context, zone string, ipAddress string) (*iaas.IPAddress, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.ipAddress", forceString(ipAddress)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPAddressAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIPAddress, err := t.Internal.Read(ctx, zone, ipAddress)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIPAddress", forceString(resultIPAddress)))

	}
	return resultIPAddress, err
}

// UpdateHostName is API call with trace log
func (t *IPAddressTracer) UpdateHostName(ctx context.Context, zone string, ipAddress string, hostName string) (*iaas.IPAddress, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.ipAddress", forceString(ipAddress)),
		attribute.String("libiaas.api.arguments.hostName", forceString(hostName)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPAddressAPI.UpdateHostName", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIPAddress, err := t.Internal.UpdateHostName(ctx, zone, ipAddress, hostName)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIPAddress", forceString(resultIPAddress)))

	}
	return resultIPAddress, err
}

/*************************************************
* IPv6NetTracer
*************************************************/

// IPv6NetTracer is for trace IPv6NetOp operations
type IPv6NetTracer struct {
	Internal iaas.IPv6NetAPI
	config   *config
}

// NewIPv6NetTracer creates new IPv6NetTracer instance
func newIPv6NetTracer(in iaas.IPv6NetAPI, cnf *config) iaas.IPv6NetAPI {
	return &IPv6NetTracer{
		Internal: in,
		config:   cnf,
	}
}

// List is API call with trace log
func (t *IPv6NetTracer) List(ctx context.Context, zone string) (*iaas.IPv6NetListResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPv6NetAPI.List", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.List(ctx, zone)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Find is API call with trace log
func (t *IPv6NetTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.IPv6NetFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPv6NetAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *IPv6NetTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.IPv6Net, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPv6NetAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIPv6Net, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIPv6Net", forceString(resultIPv6Net)))

	}
	return resultIPv6Net, err
}

/*************************************************
* IPv6AddrTracer
*************************************************/

// IPv6AddrTracer is for trace IPv6AddrOp operations
type IPv6AddrTracer struct {
	Internal iaas.IPv6AddrAPI
	config   *config
}

// NewIPv6AddrTracer creates new IPv6AddrTracer instance
func newIPv6AddrTracer(in iaas.IPv6AddrAPI, cnf *config) iaas.IPv6AddrAPI {
	return &IPv6AddrTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *IPv6AddrTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.IPv6AddrFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPv6AddrAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *IPv6AddrTracer) Create(ctx context.Context, zone string, param *iaas.IPv6AddrCreateRequest) (*iaas.IPv6Addr, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPv6AddrAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIPv6Addr, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIPv6Addr", forceString(resultIPv6Addr)))

	}
	return resultIPv6Addr, err
}

// Read is API call with trace log
func (t *IPv6AddrTracer) Read(ctx context.Context, zone string, ipv6addr string) (*iaas.IPv6Addr, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.ipv6addr", forceString(ipv6addr)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPv6AddrAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIPv6Addr, err := t.Internal.Read(ctx, zone, ipv6addr)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIPv6Addr", forceString(resultIPv6Addr)))

	}
	return resultIPv6Addr, err
}

// Update is API call with trace log
func (t *IPv6AddrTracer) Update(ctx context.Context, zone string, ipv6addr string, param *iaas.IPv6AddrUpdateRequest) (*iaas.IPv6Addr, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.ipv6addr", forceString(ipv6addr)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPv6AddrAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultIPv6Addr, err := t.Internal.Update(ctx, zone, ipv6addr, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultIPv6Addr", forceString(resultIPv6Addr)))

	}
	return resultIPv6Addr, err
}

// Delete is API call with trace log
func (t *IPv6AddrTracer) Delete(ctx context.Context, zone string, ipv6addr string) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.ipv6addr", forceString(ipv6addr)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "IPv6AddrAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, ipv6addr)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* LicenseTracer
*************************************************/

// LicenseTracer is for trace LicenseOp operations
type LicenseTracer struct {
	Internal iaas.LicenseAPI
	config   *config
}

// NewLicenseTracer creates new LicenseTracer instance
func newLicenseTracer(in iaas.LicenseAPI, cnf *config) iaas.LicenseAPI {
	return &LicenseTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *LicenseTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.LicenseFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LicenseAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *LicenseTracer) Create(ctx context.Context, param *iaas.LicenseCreateRequest) (*iaas.License, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LicenseAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLicense, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLicense", forceString(resultLicense)))

	}
	return resultLicense, err
}

// Read is API call with trace log
func (t *LicenseTracer) Read(ctx context.Context, id types.ID) (*iaas.License, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LicenseAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLicense, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLicense", forceString(resultLicense)))

	}
	return resultLicense, err
}

// Update is API call with trace log
func (t *LicenseTracer) Update(ctx context.Context, id types.ID, param *iaas.LicenseUpdateRequest) (*iaas.License, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LicenseAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLicense, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLicense", forceString(resultLicense)))

	}
	return resultLicense, err
}

// Delete is API call with trace log
func (t *LicenseTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LicenseAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* LicenseInfoTracer
*************************************************/

// LicenseInfoTracer is for trace LicenseInfoOp operations
type LicenseInfoTracer struct {
	Internal iaas.LicenseInfoAPI
	config   *config
}

// NewLicenseInfoTracer creates new LicenseInfoTracer instance
func newLicenseInfoTracer(in iaas.LicenseInfoAPI, cnf *config) iaas.LicenseInfoAPI {
	return &LicenseInfoTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *LicenseInfoTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.LicenseInfoFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LicenseInfoAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *LicenseInfoTracer) Read(ctx context.Context, id types.ID) (*iaas.LicenseInfo, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LicenseInfoAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLicenseInfo, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLicenseInfo", forceString(resultLicenseInfo)))

	}
	return resultLicenseInfo, err
}

/*************************************************
* LoadBalancerTracer
*************************************************/

// LoadBalancerTracer is for trace LoadBalancerOp operations
type LoadBalancerTracer struct {
	Internal iaas.LoadBalancerAPI
	config   *config
}

// NewLoadBalancerTracer creates new LoadBalancerTracer instance
func newLoadBalancerTracer(in iaas.LoadBalancerAPI, cnf *config) iaas.LoadBalancerAPI {
	return &LoadBalancerTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *LoadBalancerTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.LoadBalancerFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *LoadBalancerTracer) Create(ctx context.Context, zone string, param *iaas.LoadBalancerCreateRequest) (*iaas.LoadBalancer, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLoadBalancer, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLoadBalancer", forceString(resultLoadBalancer)))

	}
	return resultLoadBalancer, err
}

// Read is API call with trace log
func (t *LoadBalancerTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.LoadBalancer, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLoadBalancer, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLoadBalancer", forceString(resultLoadBalancer)))

	}
	return resultLoadBalancer, err
}

// Update is API call with trace log
func (t *LoadBalancerTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.LoadBalancerUpdateRequest) (*iaas.LoadBalancer, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLoadBalancer, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLoadBalancer", forceString(resultLoadBalancer)))

	}
	return resultLoadBalancer, err
}

// UpdateSettings is API call with trace log
func (t *LoadBalancerTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *iaas.LoadBalancerUpdateSettingsRequest) (*iaas.LoadBalancer, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLoadBalancer, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLoadBalancer", forceString(resultLoadBalancer)))

	}
	return resultLoadBalancer, err
}

// Delete is API call with trace log
func (t *LoadBalancerTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Config is API call with trace log
func (t *LoadBalancerTracer) Config(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Config", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Config(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Boot is API call with trace log
func (t *LoadBalancerTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Boot", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Shutdown is API call with trace log
func (t *LoadBalancerTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *iaas.ShutdownOption) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.shutdownOption", forceString(shutdownOption)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Shutdown", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Reset is API call with trace log
func (t *LoadBalancerTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Reset", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// MonitorCPU is API call with trace log
func (t *LoadBalancerTracer) MonitorCPU(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.CPUTimeActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.MonitorCPU", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCPUTimeActivity, err := t.Internal.MonitorCPU(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCPUTimeActivity", forceString(resultCPUTimeActivity)))

	}
	return resultCPUTimeActivity, err
}

// MonitorInterface is API call with trace log
func (t *LoadBalancerTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.InterfaceActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.MonitorInterface", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInterfaceActivity", forceString(resultInterfaceActivity)))

	}
	return resultInterfaceActivity, err
}

// Status is API call with trace log
func (t *LoadBalancerTracer) Status(ctx context.Context, zone string, id types.ID) (*iaas.LoadBalancerStatusResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LoadBalancerAPI.Status", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Status(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

/*************************************************
* LocalRouterTracer
*************************************************/

// LocalRouterTracer is for trace LocalRouterOp operations
type LocalRouterTracer struct {
	Internal iaas.LocalRouterAPI
	config   *config
}

// NewLocalRouterTracer creates new LocalRouterTracer instance
func newLocalRouterTracer(in iaas.LocalRouterAPI, cnf *config) iaas.LocalRouterAPI {
	return &LocalRouterTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *LocalRouterTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.LocalRouterFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LocalRouterAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *LocalRouterTracer) Create(ctx context.Context, param *iaas.LocalRouterCreateRequest) (*iaas.LocalRouter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LocalRouterAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLocalRouter, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLocalRouter", forceString(resultLocalRouter)))

	}
	return resultLocalRouter, err
}

// Read is API call with trace log
func (t *LocalRouterTracer) Read(ctx context.Context, id types.ID) (*iaas.LocalRouter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LocalRouterAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLocalRouter, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLocalRouter", forceString(resultLocalRouter)))

	}
	return resultLocalRouter, err
}

// Update is API call with trace log
func (t *LocalRouterTracer) Update(ctx context.Context, id types.ID, param *iaas.LocalRouterUpdateRequest) (*iaas.LocalRouter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LocalRouterAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLocalRouter, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLocalRouter", forceString(resultLocalRouter)))

	}
	return resultLocalRouter, err
}

// UpdateSettings is API call with trace log
func (t *LocalRouterTracer) UpdateSettings(ctx context.Context, id types.ID, param *iaas.LocalRouterUpdateSettingsRequest) (*iaas.LocalRouter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LocalRouterAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLocalRouter, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLocalRouter", forceString(resultLocalRouter)))

	}
	return resultLocalRouter, err
}

// Delete is API call with trace log
func (t *LocalRouterTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LocalRouterAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// HealthStatus is API call with trace log
func (t *LocalRouterTracer) HealthStatus(ctx context.Context, id types.ID) (*iaas.LocalRouterHealth, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LocalRouterAPI.HealthStatus", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLocalRouterHealth, err := t.Internal.HealthStatus(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLocalRouterHealth", forceString(resultLocalRouterHealth)))

	}
	return resultLocalRouterHealth, err
}

// MonitorLocalRouter is API call with trace log
func (t *LocalRouterTracer) MonitorLocalRouter(ctx context.Context, id types.ID, condition *iaas.MonitorCondition) (*iaas.LocalRouterActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "LocalRouterAPI.MonitorLocalRouter", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLocalRouterActivity, err := t.Internal.MonitorLocalRouter(ctx, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLocalRouterActivity", forceString(resultLocalRouterActivity)))

	}
	return resultLocalRouterActivity, err
}

/*************************************************
* MobileGatewayTracer
*************************************************/

// MobileGatewayTracer is for trace MobileGatewayOp operations
type MobileGatewayTracer struct {
	Internal iaas.MobileGatewayAPI
	config   *config
}

// NewMobileGatewayTracer creates new MobileGatewayTracer instance
func newMobileGatewayTracer(in iaas.MobileGatewayAPI, cnf *config) iaas.MobileGatewayAPI {
	return &MobileGatewayTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *MobileGatewayTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.MobileGatewayFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *MobileGatewayTracer) Create(ctx context.Context, zone string, param *iaas.MobileGatewayCreateRequest) (*iaas.MobileGateway, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultMobileGateway, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultMobileGateway", forceString(resultMobileGateway)))

	}
	return resultMobileGateway, err
}

// Read is API call with trace log
func (t *MobileGatewayTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.MobileGateway, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultMobileGateway, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultMobileGateway", forceString(resultMobileGateway)))

	}
	return resultMobileGateway, err
}

// Update is API call with trace log
func (t *MobileGatewayTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.MobileGatewayUpdateRequest) (*iaas.MobileGateway, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultMobileGateway, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultMobileGateway", forceString(resultMobileGateway)))

	}
	return resultMobileGateway, err
}

// UpdateSettings is API call with trace log
func (t *MobileGatewayTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *iaas.MobileGatewayUpdateSettingsRequest) (*iaas.MobileGateway, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultMobileGateway, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultMobileGateway", forceString(resultMobileGateway)))

	}
	return resultMobileGateway, err
}

// Delete is API call with trace log
func (t *MobileGatewayTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Config is API call with trace log
func (t *MobileGatewayTracer) Config(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Config", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Config(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Boot is API call with trace log
func (t *MobileGatewayTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Boot", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Shutdown is API call with trace log
func (t *MobileGatewayTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *iaas.ShutdownOption) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.shutdownOption", forceString(shutdownOption)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Shutdown", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Reset is API call with trace log
func (t *MobileGatewayTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Reset", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ConnectToSwitch is API call with trace log
func (t *MobileGatewayTracer) ConnectToSwitch(ctx context.Context, zone string, id types.ID, switchID types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.switchID", forceString(switchID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.ConnectToSwitch", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ConnectToSwitch(ctx, zone, id, switchID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DisconnectFromSwitch is API call with trace log
func (t *MobileGatewayTracer) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.DisconnectFromSwitch", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DisconnectFromSwitch(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// GetDNS is API call with trace log
func (t *MobileGatewayTracer) GetDNS(ctx context.Context, zone string, id types.ID) (*iaas.MobileGatewayDNSSetting, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.GetDNS", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSIMGroup, err := t.Internal.GetDNS(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSIMGroup", forceString(resultSIMGroup)))

	}
	return resultSIMGroup, err
}

// SetDNS is API call with trace log
func (t *MobileGatewayTracer) SetDNS(ctx context.Context, zone string, id types.ID, param *iaas.MobileGatewayDNSSetting) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.SetDNS", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.SetDNS(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// GetSIMRoutes is API call with trace log
func (t *MobileGatewayTracer) GetSIMRoutes(ctx context.Context, zone string, id types.ID) (iaas.MobileGatewaySIMRoutes, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.GetSIMRoutes", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSIMRoutes, err := t.Internal.GetSIMRoutes(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSIMRoutes", forceString(resultSIMRoutes)))

	}
	return resultSIMRoutes, err
}

// SetSIMRoutes is API call with trace log
func (t *MobileGatewayTracer) SetSIMRoutes(ctx context.Context, zone string, id types.ID, param []*iaas.MobileGatewaySIMRouteParam) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.SetSIMRoutes", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.SetSIMRoutes(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ListSIM is API call with trace log
func (t *MobileGatewayTracer) ListSIM(ctx context.Context, zone string, id types.ID) (iaas.MobileGatewaySIMs, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.ListSIM", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSIM, err := t.Internal.ListSIM(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSIM", forceString(resultSIM)))

	}
	return resultSIM, err
}

// AddSIM is API call with trace log
func (t *MobileGatewayTracer) AddSIM(ctx context.Context, zone string, id types.ID, param *iaas.MobileGatewayAddSIMRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.AddSIM", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.AddSIM(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DeleteSIM is API call with trace log
func (t *MobileGatewayTracer) DeleteSIM(ctx context.Context, zone string, id types.ID, simID types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.simID", forceString(simID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.DeleteSIM", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DeleteSIM(ctx, zone, id, simID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Logs is API call with trace log
func (t *MobileGatewayTracer) Logs(ctx context.Context, zone string, id types.ID) ([]*iaas.MobileGatewaySIMLogs, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.Logs", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLogs, err := t.Internal.Logs(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLogs", forceString(resultLogs)))

	}
	return resultLogs, err
}

// GetTrafficConfig is API call with trace log
func (t *MobileGatewayTracer) GetTrafficConfig(ctx context.Context, zone string, id types.ID) (*iaas.MobileGatewayTrafficControl, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.GetTrafficConfig", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultTrafficMonitoring, err := t.Internal.GetTrafficConfig(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultTrafficMonitoring", forceString(resultTrafficMonitoring)))

	}
	return resultTrafficMonitoring, err
}

// SetTrafficConfig is API call with trace log
func (t *MobileGatewayTracer) SetTrafficConfig(ctx context.Context, zone string, id types.ID, param *iaas.MobileGatewayTrafficControl) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.SetTrafficConfig", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.SetTrafficConfig(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DeleteTrafficConfig is API call with trace log
func (t *MobileGatewayTracer) DeleteTrafficConfig(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.DeleteTrafficConfig", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DeleteTrafficConfig(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// TrafficStatus is API call with trace log
func (t *MobileGatewayTracer) TrafficStatus(ctx context.Context, zone string, id types.ID) (*iaas.MobileGatewayTrafficStatus, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.TrafficStatus", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultTrafficStatus, err := t.Internal.TrafficStatus(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultTrafficStatus", forceString(resultTrafficStatus)))

	}
	return resultTrafficStatus, err
}

// MonitorInterface is API call with trace log
func (t *MobileGatewayTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, index int, condition *iaas.MonitorCondition) (*iaas.InterfaceActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.index", forceString(index)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "MobileGatewayAPI.MonitorInterface", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, index, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInterfaceActivity", forceString(resultInterfaceActivity)))

	}
	return resultInterfaceActivity, err
}

/*************************************************
* NFSTracer
*************************************************/

// NFSTracer is for trace NFSOp operations
type NFSTracer struct {
	Internal iaas.NFSAPI
	config   *config
}

// NewNFSTracer creates new NFSTracer instance
func newNFSTracer(in iaas.NFSAPI, cnf *config) iaas.NFSAPI {
	return &NFSTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *NFSTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.NFSFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *NFSTracer) Create(ctx context.Context, zone string, param *iaas.NFSCreateRequest) (*iaas.NFS, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultNFS, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultNFS", forceString(resultNFS)))

	}
	return resultNFS, err
}

// Read is API call with trace log
func (t *NFSTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.NFS, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultNFS, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultNFS", forceString(resultNFS)))

	}
	return resultNFS, err
}

// Update is API call with trace log
func (t *NFSTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.NFSUpdateRequest) (*iaas.NFS, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultNFS, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultNFS", forceString(resultNFS)))

	}
	return resultNFS, err
}

// Delete is API call with trace log
func (t *NFSTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Boot is API call with trace log
func (t *NFSTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.Boot", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Shutdown is API call with trace log
func (t *NFSTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *iaas.ShutdownOption) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.shutdownOption", forceString(shutdownOption)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.Shutdown", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Reset is API call with trace log
func (t *NFSTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.Reset", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// MonitorCPU is API call with trace log
func (t *NFSTracer) MonitorCPU(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.CPUTimeActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.MonitorCPU", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCPUTimeActivity, err := t.Internal.MonitorCPU(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCPUTimeActivity", forceString(resultCPUTimeActivity)))

	}
	return resultCPUTimeActivity, err
}

// MonitorFreeDiskSize is API call with trace log
func (t *NFSTracer) MonitorFreeDiskSize(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.FreeDiskSizeActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.MonitorFreeDiskSize", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultFreeDiskSizeActivity, err := t.Internal.MonitorFreeDiskSize(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultFreeDiskSizeActivity", forceString(resultFreeDiskSizeActivity)))

	}
	return resultFreeDiskSizeActivity, err
}

// MonitorInterface is API call with trace log
func (t *NFSTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.InterfaceActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NFSAPI.MonitorInterface", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInterfaceActivity", forceString(resultInterfaceActivity)))

	}
	return resultInterfaceActivity, err
}

/*************************************************
* NoteTracer
*************************************************/

// NoteTracer is for trace NoteOp operations
type NoteTracer struct {
	Internal iaas.NoteAPI
	config   *config
}

// NewNoteTracer creates new NoteTracer instance
func newNoteTracer(in iaas.NoteAPI, cnf *config) iaas.NoteAPI {
	return &NoteTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *NoteTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.NoteFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NoteAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *NoteTracer) Create(ctx context.Context, param *iaas.NoteCreateRequest) (*iaas.Note, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NoteAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultNote, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultNote", forceString(resultNote)))

	}
	return resultNote, err
}

// Read is API call with trace log
func (t *NoteTracer) Read(ctx context.Context, id types.ID) (*iaas.Note, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NoteAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultNote, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultNote", forceString(resultNote)))

	}
	return resultNote, err
}

// Update is API call with trace log
func (t *NoteTracer) Update(ctx context.Context, id types.ID, param *iaas.NoteUpdateRequest) (*iaas.Note, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NoteAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultNote, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultNote", forceString(resultNote)))

	}
	return resultNote, err
}

// Delete is API call with trace log
func (t *NoteTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "NoteAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* PacketFilterTracer
*************************************************/

// PacketFilterTracer is for trace PacketFilterOp operations
type PacketFilterTracer struct {
	Internal iaas.PacketFilterAPI
	config   *config
}

// NewPacketFilterTracer creates new PacketFilterTracer instance
func newPacketFilterTracer(in iaas.PacketFilterAPI, cnf *config) iaas.PacketFilterAPI {
	return &PacketFilterTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *PacketFilterTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.PacketFilterFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PacketFilterAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *PacketFilterTracer) Create(ctx context.Context, zone string, param *iaas.PacketFilterCreateRequest) (*iaas.PacketFilter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PacketFilterAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultPacketFilter, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultPacketFilter", forceString(resultPacketFilter)))

	}
	return resultPacketFilter, err
}

// Read is API call with trace log
func (t *PacketFilterTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.PacketFilter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PacketFilterAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultPacketFilter, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultPacketFilter", forceString(resultPacketFilter)))

	}
	return resultPacketFilter, err
}

// Update is API call with trace log
func (t *PacketFilterTracer) Update(ctx context.Context, zone string, id types.ID, updateParam *iaas.PacketFilterUpdateRequest, originalExpressionHash string) (*iaas.PacketFilter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.updateParam", forceString(updateParam)),
		attribute.String("libiaas.api.arguments.originalExpressionHash", forceString(originalExpressionHash)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PacketFilterAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultPacketFilter, err := t.Internal.Update(ctx, zone, id, updateParam, originalExpressionHash)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultPacketFilter", forceString(resultPacketFilter)))

	}
	return resultPacketFilter, err
}

// Delete is API call with trace log
func (t *PacketFilterTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PacketFilterAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* PrivateHostTracer
*************************************************/

// PrivateHostTracer is for trace PrivateHostOp operations
type PrivateHostTracer struct {
	Internal iaas.PrivateHostAPI
	config   *config
}

// NewPrivateHostTracer creates new PrivateHostTracer instance
func newPrivateHostTracer(in iaas.PrivateHostAPI, cnf *config) iaas.PrivateHostAPI {
	return &PrivateHostTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *PrivateHostTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.PrivateHostFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PrivateHostAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *PrivateHostTracer) Create(ctx context.Context, zone string, param *iaas.PrivateHostCreateRequest) (*iaas.PrivateHost, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PrivateHostAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultPrivateHost, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultPrivateHost", forceString(resultPrivateHost)))

	}
	return resultPrivateHost, err
}

// Read is API call with trace log
func (t *PrivateHostTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.PrivateHost, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PrivateHostAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultPrivateHost, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultPrivateHost", forceString(resultPrivateHost)))

	}
	return resultPrivateHost, err
}

// Update is API call with trace log
func (t *PrivateHostTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.PrivateHostUpdateRequest) (*iaas.PrivateHost, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PrivateHostAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultPrivateHost, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultPrivateHost", forceString(resultPrivateHost)))

	}
	return resultPrivateHost, err
}

// Delete is API call with trace log
func (t *PrivateHostTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PrivateHostAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* PrivateHostPlanTracer
*************************************************/

// PrivateHostPlanTracer is for trace PrivateHostPlanOp operations
type PrivateHostPlanTracer struct {
	Internal iaas.PrivateHostPlanAPI
	config   *config
}

// NewPrivateHostPlanTracer creates new PrivateHostPlanTracer instance
func newPrivateHostPlanTracer(in iaas.PrivateHostPlanAPI, cnf *config) iaas.PrivateHostPlanAPI {
	return &PrivateHostPlanTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *PrivateHostPlanTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.PrivateHostPlanFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PrivateHostPlanAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *PrivateHostPlanTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.PrivateHostPlan, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "PrivateHostPlanAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultPrivateHostPlan, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultPrivateHostPlan", forceString(resultPrivateHostPlan)))

	}
	return resultPrivateHostPlan, err
}

/*************************************************
* ProxyLBTracer
*************************************************/

// ProxyLBTracer is for trace ProxyLBOp operations
type ProxyLBTracer struct {
	Internal iaas.ProxyLBAPI
	config   *config
}

// NewProxyLBTracer creates new ProxyLBTracer instance
func newProxyLBTracer(in iaas.ProxyLBAPI, cnf *config) iaas.ProxyLBAPI {
	return &ProxyLBTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *ProxyLBTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.ProxyLBFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *ProxyLBTracer) Create(ctx context.Context, param *iaas.ProxyLBCreateRequest) (*iaas.ProxyLB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultProxyLB, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultProxyLB", forceString(resultProxyLB)))

	}
	return resultProxyLB, err
}

// Read is API call with trace log
func (t *ProxyLBTracer) Read(ctx context.Context, id types.ID) (*iaas.ProxyLB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultProxyLB, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultProxyLB", forceString(resultProxyLB)))

	}
	return resultProxyLB, err
}

// Update is API call with trace log
func (t *ProxyLBTracer) Update(ctx context.Context, id types.ID, param *iaas.ProxyLBUpdateRequest) (*iaas.ProxyLB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultProxyLB, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultProxyLB", forceString(resultProxyLB)))

	}
	return resultProxyLB, err
}

// UpdateSettings is API call with trace log
func (t *ProxyLBTracer) UpdateSettings(ctx context.Context, id types.ID, param *iaas.ProxyLBUpdateSettingsRequest) (*iaas.ProxyLB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultProxyLB, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultProxyLB", forceString(resultProxyLB)))

	}
	return resultProxyLB, err
}

// Delete is API call with trace log
func (t *ProxyLBTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ChangePlan is API call with trace log
func (t *ProxyLBTracer) ChangePlan(ctx context.Context, id types.ID, param *iaas.ProxyLBChangePlanRequest) (*iaas.ProxyLB, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.ChangePlan", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultProxyLB, err := t.Internal.ChangePlan(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultProxyLB", forceString(resultProxyLB)))

	}
	return resultProxyLB, err
}

// GetCertificates is API call with trace log
func (t *ProxyLBTracer) GetCertificates(ctx context.Context, id types.ID) (*iaas.ProxyLBCertificates, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.GetCertificates", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultProxyLBCertificates, err := t.Internal.GetCertificates(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultProxyLBCertificates", forceString(resultProxyLBCertificates)))

	}
	return resultProxyLBCertificates, err
}

// SetCertificates is API call with trace log
func (t *ProxyLBTracer) SetCertificates(ctx context.Context, id types.ID, param *iaas.ProxyLBSetCertificatesRequest) (*iaas.ProxyLBCertificates, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.SetCertificates", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultProxyLBCertificates, err := t.Internal.SetCertificates(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultProxyLBCertificates", forceString(resultProxyLBCertificates)))

	}
	return resultProxyLBCertificates, err
}

// DeleteCertificates is API call with trace log
func (t *ProxyLBTracer) DeleteCertificates(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.DeleteCertificates", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DeleteCertificates(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// RenewLetsEncryptCert is API call with trace log
func (t *ProxyLBTracer) RenewLetsEncryptCert(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.RenewLetsEncryptCert", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.RenewLetsEncryptCert(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// HealthStatus is API call with trace log
func (t *ProxyLBTracer) HealthStatus(ctx context.Context, id types.ID) (*iaas.ProxyLBHealth, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.HealthStatus", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultProxyLBHealth, err := t.Internal.HealthStatus(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultProxyLBHealth", forceString(resultProxyLBHealth)))

	}
	return resultProxyLBHealth, err
}

// MonitorConnection is API call with trace log
func (t *ProxyLBTracer) MonitorConnection(ctx context.Context, id types.ID, condition *iaas.MonitorCondition) (*iaas.ConnectionActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ProxyLBAPI.MonitorConnection", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultConnectionActivity, err := t.Internal.MonitorConnection(ctx, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultConnectionActivity", forceString(resultConnectionActivity)))

	}
	return resultConnectionActivity, err
}

/*************************************************
* RegionTracer
*************************************************/

// RegionTracer is for trace RegionOp operations
type RegionTracer struct {
	Internal iaas.RegionAPI
	config   *config
}

// NewRegionTracer creates new RegionTracer instance
func newRegionTracer(in iaas.RegionAPI, cnf *config) iaas.RegionAPI {
	return &RegionTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *RegionTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.RegionFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "RegionAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *RegionTracer) Read(ctx context.Context, id types.ID) (*iaas.Region, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "RegionAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultRegion, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultRegion", forceString(resultRegion)))

	}
	return resultRegion, err
}

/*************************************************
* ServerTracer
*************************************************/

// ServerTracer is for trace ServerOp operations
type ServerTracer struct {
	Internal iaas.ServerAPI
	config   *config
}

// NewServerTracer creates new ServerTracer instance
func newServerTracer(in iaas.ServerAPI, cnf *config) iaas.ServerAPI {
	return &ServerTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *ServerTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.ServerFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *ServerTracer) Create(ctx context.Context, zone string, param *iaas.ServerCreateRequest) (*iaas.Server, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultServer, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultServer", forceString(resultServer)))

	}
	return resultServer, err
}

// Read is API call with trace log
func (t *ServerTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.Server, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultServer, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultServer", forceString(resultServer)))

	}
	return resultServer, err
}

// Update is API call with trace log
func (t *ServerTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.ServerUpdateRequest) (*iaas.Server, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultServer, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultServer", forceString(resultServer)))

	}
	return resultServer, err
}

// Delete is API call with trace log
func (t *ServerTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DeleteWithDisks is API call with trace log
func (t *ServerTracer) DeleteWithDisks(ctx context.Context, zone string, id types.ID, disks *iaas.ServerDeleteWithDisksRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.disks", forceString(disks)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.DeleteWithDisks", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DeleteWithDisks(ctx, zone, id, disks)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ChangePlan is API call with trace log
func (t *ServerTracer) ChangePlan(ctx context.Context, zone string, id types.ID, plan *iaas.ServerChangePlanRequest) (*iaas.Server, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.plan", forceString(plan)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.ChangePlan", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultServer, err := t.Internal.ChangePlan(ctx, zone, id, plan)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultServer", forceString(resultServer)))

	}
	return resultServer, err
}

// InsertCDROM is API call with trace log
func (t *ServerTracer) InsertCDROM(ctx context.Context, zone string, id types.ID, insertParam *iaas.InsertCDROMRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.insertParam", forceString(insertParam)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.InsertCDROM", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.InsertCDROM(ctx, zone, id, insertParam)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// EjectCDROM is API call with trace log
func (t *ServerTracer) EjectCDROM(ctx context.Context, zone string, id types.ID, ejectParam *iaas.EjectCDROMRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.ejectParam", forceString(ejectParam)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.EjectCDROM", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.EjectCDROM(ctx, zone, id, ejectParam)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Boot is API call with trace log
func (t *ServerTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.Boot", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Shutdown is API call with trace log
func (t *ServerTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *iaas.ShutdownOption) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.shutdownOption", forceString(shutdownOption)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.Shutdown", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Reset is API call with trace log
func (t *ServerTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.Reset", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// BootWithVariables is API call with trace log
func (t *ServerTracer) BootWithVariables(ctx context.Context, zone string, id types.ID, param *iaas.ServerBootVariables) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.BootWithVariables", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.BootWithVariables(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// SendKey is API call with trace log
func (t *ServerTracer) SendKey(ctx context.Context, zone string, id types.ID, keyboardParam *iaas.SendKeyRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.keyboardParam", forceString(keyboardParam)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.SendKey", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.SendKey(ctx, zone, id, keyboardParam)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// SendNMI is API call with trace log
func (t *ServerTracer) SendNMI(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.SendNMI", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.SendNMI(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// GetVNCProxy is API call with trace log
func (t *ServerTracer) GetVNCProxy(ctx context.Context, zone string, id types.ID) (*iaas.VNCProxyInfo, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.GetVNCProxy", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultVNCProxyInfo, err := t.Internal.GetVNCProxy(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultVNCProxyInfo", forceString(resultVNCProxyInfo)))

	}
	return resultVNCProxyInfo, err
}

// Monitor is API call with trace log
func (t *ServerTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.CPUTimeActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.Monitor", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCPUTimeActivity, err := t.Internal.Monitor(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCPUTimeActivity", forceString(resultCPUTimeActivity)))

	}
	return resultCPUTimeActivity, err
}

// MonitorCPU is API call with trace log
func (t *ServerTracer) MonitorCPU(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.CPUTimeActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerAPI.MonitorCPU", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCPUTimeActivity, err := t.Internal.MonitorCPU(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCPUTimeActivity", forceString(resultCPUTimeActivity)))

	}
	return resultCPUTimeActivity, err
}

/*************************************************
* ServerPlanTracer
*************************************************/

// ServerPlanTracer is for trace ServerPlanOp operations
type ServerPlanTracer struct {
	Internal iaas.ServerPlanAPI
	config   *config
}

// NewServerPlanTracer creates new ServerPlanTracer instance
func newServerPlanTracer(in iaas.ServerPlanAPI, cnf *config) iaas.ServerPlanAPI {
	return &ServerPlanTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *ServerPlanTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.ServerPlanFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerPlanAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *ServerPlanTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.ServerPlan, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServerPlanAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultServerPlan, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultServerPlan", forceString(resultServerPlan)))

	}
	return resultServerPlan, err
}

/*************************************************
* ServiceClassTracer
*************************************************/

// ServiceClassTracer is for trace ServiceClassOp operations
type ServiceClassTracer struct {
	Internal iaas.ServiceClassAPI
	config   *config
}

// NewServiceClassTracer creates new ServiceClassTracer instance
func newServiceClassTracer(in iaas.ServiceClassAPI, cnf *config) iaas.ServiceClassAPI {
	return &ServiceClassTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *ServiceClassTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.ServiceClassFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ServiceClassAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

/*************************************************
* SIMTracer
*************************************************/

// SIMTracer is for trace SIMOp operations
type SIMTracer struct {
	Internal iaas.SIMAPI
	config   *config
}

// NewSIMTracer creates new SIMTracer instance
func newSIMTracer(in iaas.SIMAPI, cnf *config) iaas.SIMAPI {
	return &SIMTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *SIMTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.SIMFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *SIMTracer) Create(ctx context.Context, param *iaas.SIMCreateRequest) (*iaas.SIM, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSIM, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSIM", forceString(resultSIM)))

	}
	return resultSIM, err
}

// Read is API call with trace log
func (t *SIMTracer) Read(ctx context.Context, id types.ID) (*iaas.SIM, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSIM, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSIM", forceString(resultSIM)))

	}
	return resultSIM, err
}

// Update is API call with trace log
func (t *SIMTracer) Update(ctx context.Context, id types.ID, param *iaas.SIMUpdateRequest) (*iaas.SIM, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSIM, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSIM", forceString(resultSIM)))

	}
	return resultSIM, err
}

// Delete is API call with trace log
func (t *SIMTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Activate is API call with trace log
func (t *SIMTracer) Activate(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.Activate", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Activate(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Deactivate is API call with trace log
func (t *SIMTracer) Deactivate(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.Deactivate", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Deactivate(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// AssignIP is API call with trace log
func (t *SIMTracer) AssignIP(ctx context.Context, id types.ID, param *iaas.SIMAssignIPRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.AssignIP", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.AssignIP(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ClearIP is API call with trace log
func (t *SIMTracer) ClearIP(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.ClearIP", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ClearIP(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// IMEILock is API call with trace log
func (t *SIMTracer) IMEILock(ctx context.Context, id types.ID, param *iaas.SIMIMEILockRequest) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.IMEILock", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.IMEILock(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// IMEIUnlock is API call with trace log
func (t *SIMTracer) IMEIUnlock(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.IMEIUnlock", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.IMEIUnlock(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Logs is API call with trace log
func (t *SIMTracer) Logs(ctx context.Context, id types.ID) (*iaas.SIMLogsResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.Logs", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Logs(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// GetNetworkOperator is API call with trace log
func (t *SIMTracer) GetNetworkOperator(ctx context.Context, id types.ID) ([]*iaas.SIMNetworkOperatorConfig, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.GetNetworkOperator", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultConfigs, err := t.Internal.GetNetworkOperator(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultConfigs", forceString(resultConfigs)))

	}
	return resultConfigs, err
}

// SetNetworkOperator is API call with trace log
func (t *SIMTracer) SetNetworkOperator(ctx context.Context, id types.ID, configs []*iaas.SIMNetworkOperatorConfig) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.configs", forceString(configs)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.SetNetworkOperator", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.SetNetworkOperator(ctx, id, configs)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// MonitorSIM is API call with trace log
func (t *SIMTracer) MonitorSIM(ctx context.Context, id types.ID, condition *iaas.MonitorCondition) (*iaas.LinkActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.MonitorSIM", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultLinkActivity, err := t.Internal.MonitorSIM(ctx, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultLinkActivity", forceString(resultLinkActivity)))

	}
	return resultLinkActivity, err
}

// Status is API call with trace log
func (t *SIMTracer) Status(ctx context.Context, id types.ID) (*iaas.SIMInfo, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SIMAPI.Status", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSIM, err := t.Internal.Status(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSIM", forceString(resultSIM)))

	}
	return resultSIM, err
}

/*************************************************
* SimpleMonitorTracer
*************************************************/

// SimpleMonitorTracer is for trace SimpleMonitorOp operations
type SimpleMonitorTracer struct {
	Internal iaas.SimpleMonitorAPI
	config   *config
}

// NewSimpleMonitorTracer creates new SimpleMonitorTracer instance
func newSimpleMonitorTracer(in iaas.SimpleMonitorAPI, cnf *config) iaas.SimpleMonitorAPI {
	return &SimpleMonitorTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *SimpleMonitorTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.SimpleMonitorFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SimpleMonitorAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *SimpleMonitorTracer) Create(ctx context.Context, param *iaas.SimpleMonitorCreateRequest) (*iaas.SimpleMonitor, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SimpleMonitorAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSimpleMonitor, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSimpleMonitor", forceString(resultSimpleMonitor)))

	}
	return resultSimpleMonitor, err
}

// Read is API call with trace log
func (t *SimpleMonitorTracer) Read(ctx context.Context, id types.ID) (*iaas.SimpleMonitor, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SimpleMonitorAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSimpleMonitor, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSimpleMonitor", forceString(resultSimpleMonitor)))

	}
	return resultSimpleMonitor, err
}

// Update is API call with trace log
func (t *SimpleMonitorTracer) Update(ctx context.Context, id types.ID, param *iaas.SimpleMonitorUpdateRequest) (*iaas.SimpleMonitor, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SimpleMonitorAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSimpleMonitor, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSimpleMonitor", forceString(resultSimpleMonitor)))

	}
	return resultSimpleMonitor, err
}

// UpdateSettings is API call with trace log
func (t *SimpleMonitorTracer) UpdateSettings(ctx context.Context, id types.ID, param *iaas.SimpleMonitorUpdateSettingsRequest) (*iaas.SimpleMonitor, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SimpleMonitorAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSimpleMonitor, err := t.Internal.UpdateSettings(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSimpleMonitor", forceString(resultSimpleMonitor)))

	}
	return resultSimpleMonitor, err
}

// Delete is API call with trace log
func (t *SimpleMonitorTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SimpleMonitorAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// MonitorResponseTime is API call with trace log
func (t *SimpleMonitorTracer) MonitorResponseTime(ctx context.Context, id types.ID, condition *iaas.MonitorCondition) (*iaas.ResponseTimeSecActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SimpleMonitorAPI.MonitorResponseTime", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultResponseTimeSecActivity, err := t.Internal.MonitorResponseTime(ctx, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultResponseTimeSecActivity", forceString(resultResponseTimeSecActivity)))

	}
	return resultResponseTimeSecActivity, err
}

// HealthStatus is API call with trace log
func (t *SimpleMonitorTracer) HealthStatus(ctx context.Context, id types.ID) (*iaas.SimpleMonitorHealthStatus, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SimpleMonitorAPI.HealthStatus", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSimpleMonitorHealthStatus, err := t.Internal.HealthStatus(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSimpleMonitorHealthStatus", forceString(resultSimpleMonitorHealthStatus)))

	}
	return resultSimpleMonitorHealthStatus, err
}

/*************************************************
* SSHKeyTracer
*************************************************/

// SSHKeyTracer is for trace SSHKeyOp operations
type SSHKeyTracer struct {
	Internal iaas.SSHKeyAPI
	config   *config
}

// NewSSHKeyTracer creates new SSHKeyTracer instance
func newSSHKeyTracer(in iaas.SSHKeyAPI, cnf *config) iaas.SSHKeyAPI {
	return &SSHKeyTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *SSHKeyTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.SSHKeyFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SSHKeyAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *SSHKeyTracer) Create(ctx context.Context, param *iaas.SSHKeyCreateRequest) (*iaas.SSHKey, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SSHKeyAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSSHKey, err := t.Internal.Create(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSSHKey", forceString(resultSSHKey)))

	}
	return resultSSHKey, err
}

// Generate is API call with trace log
func (t *SSHKeyTracer) Generate(ctx context.Context, param *iaas.SSHKeyGenerateRequest) (*iaas.SSHKeyGenerated, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SSHKeyAPI.Generate", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSSHKeyGenerated, err := t.Internal.Generate(ctx, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSSHKeyGenerated", forceString(resultSSHKeyGenerated)))

	}
	return resultSSHKeyGenerated, err
}

// Read is API call with trace log
func (t *SSHKeyTracer) Read(ctx context.Context, id types.ID) (*iaas.SSHKey, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SSHKeyAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSSHKey, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSSHKey", forceString(resultSSHKey)))

	}
	return resultSSHKey, err
}

// Update is API call with trace log
func (t *SSHKeyTracer) Update(ctx context.Context, id types.ID, param *iaas.SSHKeyUpdateRequest) (*iaas.SSHKey, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SSHKeyAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSSHKey, err := t.Internal.Update(ctx, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSSHKey", forceString(resultSSHKey)))

	}
	return resultSSHKey, err
}

// Delete is API call with trace log
func (t *SSHKeyTracer) Delete(ctx context.Context, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SSHKeyAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

/*************************************************
* SubnetTracer
*************************************************/

// SubnetTracer is for trace SubnetOp operations
type SubnetTracer struct {
	Internal iaas.SubnetAPI
	config   *config
}

// NewSubnetTracer creates new SubnetTracer instance
func newSubnetTracer(in iaas.SubnetAPI, cnf *config) iaas.SubnetAPI {
	return &SubnetTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *SubnetTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.SubnetFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SubnetAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *SubnetTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.Subnet, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SubnetAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSubnet, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSubnet", forceString(resultSubnet)))

	}
	return resultSubnet, err
}

/*************************************************
* SwitchTracer
*************************************************/

// SwitchTracer is for trace SwitchOp operations
type SwitchTracer struct {
	Internal iaas.SwitchAPI
	config   *config
}

// NewSwitchTracer creates new SwitchTracer instance
func newSwitchTracer(in iaas.SwitchAPI, cnf *config) iaas.SwitchAPI {
	return &SwitchTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *SwitchTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.SwitchFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SwitchAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *SwitchTracer) Create(ctx context.Context, zone string, param *iaas.SwitchCreateRequest) (*iaas.Switch, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SwitchAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSwitch, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSwitch", forceString(resultSwitch)))

	}
	return resultSwitch, err
}

// Read is API call with trace log
func (t *SwitchTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.Switch, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SwitchAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSwitch, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSwitch", forceString(resultSwitch)))

	}
	return resultSwitch, err
}

// Update is API call with trace log
func (t *SwitchTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.SwitchUpdateRequest) (*iaas.Switch, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SwitchAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultSwitch, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultSwitch", forceString(resultSwitch)))

	}
	return resultSwitch, err
}

// Delete is API call with trace log
func (t *SwitchTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SwitchAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ConnectToBridge is API call with trace log
func (t *SwitchTracer) ConnectToBridge(ctx context.Context, zone string, id types.ID, bridgeID types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.bridgeID", forceString(bridgeID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SwitchAPI.ConnectToBridge", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ConnectToBridge(ctx, zone, id, bridgeID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DisconnectFromBridge is API call with trace log
func (t *SwitchTracer) DisconnectFromBridge(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SwitchAPI.DisconnectFromBridge", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DisconnectFromBridge(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// GetServers is API call with trace log
func (t *SwitchTracer) GetServers(ctx context.Context, zone string, id types.ID) (*iaas.SwitchGetServersResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "SwitchAPI.GetServers", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.GetServers(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

/*************************************************
* VPCRouterTracer
*************************************************/

// VPCRouterTracer is for trace VPCRouterOp operations
type VPCRouterTracer struct {
	Internal iaas.VPCRouterAPI
	config   *config
}

// NewVPCRouterTracer creates new VPCRouterTracer instance
func newVPCRouterTracer(in iaas.VPCRouterAPI, cnf *config) iaas.VPCRouterAPI {
	return &VPCRouterTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *VPCRouterTracer) Find(ctx context.Context, zone string, conditions *iaas.FindCondition) (*iaas.VPCRouterFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, zone, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Create is API call with trace log
func (t *VPCRouterTracer) Create(ctx context.Context, zone string, param *iaas.VPCRouterCreateRequest) (*iaas.VPCRouter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Create", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultVPCRouter, err := t.Internal.Create(ctx, zone, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultVPCRouter", forceString(resultVPCRouter)))

	}
	return resultVPCRouter, err
}

// Read is API call with trace log
func (t *VPCRouterTracer) Read(ctx context.Context, zone string, id types.ID) (*iaas.VPCRouter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultVPCRouter, err := t.Internal.Read(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultVPCRouter", forceString(resultVPCRouter)))

	}
	return resultVPCRouter, err
}

// Update is API call with trace log
func (t *VPCRouterTracer) Update(ctx context.Context, zone string, id types.ID, param *iaas.VPCRouterUpdateRequest) (*iaas.VPCRouter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Update", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultVPCRouter, err := t.Internal.Update(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultVPCRouter", forceString(resultVPCRouter)))

	}
	return resultVPCRouter, err
}

// UpdateSettings is API call with trace log
func (t *VPCRouterTracer) UpdateSettings(ctx context.Context, zone string, id types.ID, param *iaas.VPCRouterUpdateSettingsRequest) (*iaas.VPCRouter, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.param", forceString(param)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.UpdateSettings", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultVPCRouter, err := t.Internal.UpdateSettings(ctx, zone, id, param)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultVPCRouter", forceString(resultVPCRouter)))

	}
	return resultVPCRouter, err
}

// Delete is API call with trace log
func (t *VPCRouterTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Delete", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Delete(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Config is API call with trace log
func (t *VPCRouterTracer) Config(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Config", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Config(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Boot is API call with trace log
func (t *VPCRouterTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Boot", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Boot(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Shutdown is API call with trace log
func (t *VPCRouterTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *iaas.ShutdownOption) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.shutdownOption", forceString(shutdownOption)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Shutdown", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Shutdown(ctx, zone, id, shutdownOption)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// Reset is API call with trace log
func (t *VPCRouterTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Reset", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.Reset(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// ConnectToSwitch is API call with trace log
func (t *VPCRouterTracer) ConnectToSwitch(ctx context.Context, zone string, id types.ID, nicIndex int, switchID types.ID) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.nicIndex", forceString(nicIndex)),
		attribute.String("libiaas.api.arguments.switchID", forceString(switchID)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.ConnectToSwitch", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.ConnectToSwitch(ctx, zone, id, nicIndex, switchID)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// DisconnectFromSwitch is API call with trace log
func (t *VPCRouterTracer) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID, nicIndex int) error {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.nicIndex", forceString(nicIndex)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.DisconnectFromSwitch", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	err := t.Internal.DisconnectFromSwitch(ctx, zone, id, nicIndex)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")

	}
	return err
}

// MonitorCPU is API call with trace log
func (t *VPCRouterTracer) MonitorCPU(ctx context.Context, zone string, id types.ID, condition *iaas.MonitorCondition) (*iaas.CPUTimeActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.MonitorCPU", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultCPUTimeActivity, err := t.Internal.MonitorCPU(ctx, zone, id, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultCPUTimeActivity", forceString(resultCPUTimeActivity)))

	}
	return resultCPUTimeActivity, err
}

// MonitorInterface is API call with trace log
func (t *VPCRouterTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, index int, condition *iaas.MonitorCondition) (*iaas.InterfaceActivity, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
		attribute.String("libiaas.api.arguments.index", forceString(index)),
		attribute.String("libiaas.api.arguments.condition", forceString(condition)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.MonitorInterface", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultInterfaceActivity, err := t.Internal.MonitorInterface(ctx, zone, id, index, condition)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultInterfaceActivity", forceString(resultInterfaceActivity)))

	}
	return resultInterfaceActivity, err
}

// Status is API call with trace log
func (t *VPCRouterTracer) Status(ctx context.Context, zone string, id types.ID) (*iaas.VPCRouterStatus, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Status", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultVPCRouterStatus, err := t.Internal.Status(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultVPCRouterStatus", forceString(resultVPCRouterStatus)))

	}
	return resultVPCRouterStatus, err
}

// Logs is API call with trace log
func (t *VPCRouterTracer) Logs(ctx context.Context, zone string, id types.ID) (*iaas.VPCRouterLog, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.zone", zone),
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "VPCRouterAPI.Logs", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultVPCRouterLog, err := t.Internal.Logs(ctx, zone, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultVPCRouterLog", forceString(resultVPCRouterLog)))

	}
	return resultVPCRouterLog, err
}

/*************************************************
* ZoneTracer
*************************************************/

// ZoneTracer is for trace ZoneOp operations
type ZoneTracer struct {
	Internal iaas.ZoneAPI
	config   *config
}

// NewZoneTracer creates new ZoneTracer instance
func newZoneTracer(in iaas.ZoneAPI, cnf *config) iaas.ZoneAPI {
	return &ZoneTracer{
		Internal: in,
		config:   cnf,
	}
}

// Find is API call with trace log
func (t *ZoneTracer) Find(ctx context.Context, conditions *iaas.FindCondition) (*iaas.ZoneFindResult, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.conditions", forceString(conditions)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ZoneAPI.Find", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	result, err := t.Internal.Find(ctx, conditions)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.result", forceString(result)))

	}
	return result, err
}

// Read is API call with trace log
func (t *ZoneTracer) Read(ctx context.Context, id types.ID) (*iaas.Zone, error) {
	var span trace.Span
	options := append(t.config.SpanStartOptions, trace.WithAttributes(
		attribute.String("libiaas.api.arguments.id", forceString(id)),
	))
	ctx, span = t.config.Tracer.Start(ctx, "ZoneAPI.Read", options...)
	defer func() {
		span.End()
	}()

	// for http trace
	ctx = httptrace.WithClientTrace(ctx, otelhttptrace.NewClientTrace(ctx))
	resultZone, err := t.Internal.Read(ctx, id)

	if err != nil {
		span.SetStatus(codes.Error, err.Error())
	} else {
		span.SetStatus(codes.Ok, "")
		span.SetAttributes(attribute.String("libiaas.api.results.resultZone", forceString(resultZone)))

	}
	return resultZone, err
}
